{"version":3,"file":"index.js","sources":["../../../../node_modules/country-codes-list/index.js"],"sourcesContent":["const groupBy = require('./utils/groupBy')\nconst supplant = require('./utils/supplant')\nconst countriesData = require('./countriesData')\n\nmodule.exports = {  \n  /**\n   * Returns some module utils\n   */\n  utils: {\n    groupBy: groupBy\n  },\n\n  /**\n   * Returns the list with all the countries data\n   */\n  all: function () {\n    return countriesData\n  },\n  /**\n   * Filters the list of countries and returns those matching with the filter criteria\n   * @param {String} countryProperty - The property to use in the filter. Must be any of the country properties (countryCode, currencyCode, etc)\n   * @param {String} value - The value to use in the filter\n   */\n  filter: function (countryProperty, value) {\n    return countriesData.filter(countryData => countryData[countryProperty] === value)\n  },\n  /**\n   * Find a country by a property and return the first match\n   * @param {String} countryProperty - The property to use in the search. Must be any of the country properties (countryCode, currencyCode, etc)\n   * @param {String} value - The value to use in the filter\n   */\n  findOne: function (countryProperty, value) {\n    return countriesData.find(countryData => countryData[countryProperty] === value)\n  },\n  /**\n   * Returns a collection with fields mapped as requested\n   * @param {*} fields - Map of fields and placeholders \n   */\n  customArray: function (fields = { name: '{countryNameEn} ({countryCode})', value: '{countryCode}'}, { sortBy, sortDataBy, filter } = {}) {\n    const finalCollection = []\n\n    let data = countriesData\n    if (typeof filter === 'function') {\n      data = data.filter(filter)\n    }\n\n    if (sortDataBy) {\n      // ignore upper and lowercase\n      const collator = new Intl.Collator([], { sensitivity:'accent' })\n      data.sort((a, b) => collator.compare(a[sortDataBy], b[sortDataBy]))\n    }\n\n    data.forEach(countryData => {\n      let collectionObject = {}\n      for (const field in fields) {\n        collectionObject[field] = supplant(fields[field], countryData)\n      }\n      finalCollection.push(collectionObject)\n    })\n\n    if (sortBy && fields[sortBy]) {\n      // ignore upper and lowercase\n      const collator = new Intl.Collator([], {sensitivity:'accent'})\n      finalCollection.sort((a, b) => collator.compare(a[sortBy], b[sortBy]))\n    }\n\n    return finalCollection\n  },\n  /**\n   * Returns a custom object with the passed key as object key and a value made up with\n   * values set in the placeholders of the label variable\n   * @param {*} key - Key used to construct the object to return\n   * @param {*} label - Placeholder like string, with all the fields that you want to use\n   */\n  customList: function (key = 'countryCode', label = '{countryNameEn} ({countryCode})', { filter } = {}) {\n    const finalObject = {}\n    let data = countriesData\n    if (typeof filter === 'function') {\n      data = data.filter(filter)\n    }\n    data.forEach(countryData => {\n      const value = supplant(label, countryData)\n      finalObject[countryData[key]] = value\n    })\n\n    return finalObject\n  }\n}\n"],"names":["require$$0","require$$1","require$$2"],"mappings":"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"}