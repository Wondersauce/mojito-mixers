import _objectWithoutPropertiesLoose from '../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js';
import _extends from '../../../@babel/runtime/helpers/esm/extends.js';
import * as React from 'react';
import { alpha } from '@mui/system';
import SwitchBase from '../internal/SwitchBase.js';
import CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank.js';
import CheckBoxIcon from '../internal/svg-icons/CheckBox.js';
import IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox.js';
import useThemeProps from '../styles/useThemeProps.js';
import styled, { rootShouldForwardProp } from '../styles/styled.js';
import checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses.js';
import { jsx } from 'react/jsx-runtime';
import capitalize from '../../utils/esm/capitalize.js';
import composeClasses from '../../base/composeClasses/composeClasses.js';

const _excluded = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"];

const useUtilityClasses = ownerState => {
  const {
    classes,
    indeterminate,
    color
  } = ownerState;
  const slots = {
    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]
  };
  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
  return _extends({}, classes, composedClasses);
};

const CheckboxRoot = styled(SwitchBase, {
  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
  name: 'MuiCheckbox',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
  }
})(({
  theme,
  ownerState
}) => _extends({
  color: theme.palette.text.secondary
}, !ownerState.disableRipple && {
  '&:hover': {
    backgroundColor: alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    '@media (hover: none)': {
      backgroundColor: 'transparent'
    }
  }
}, ownerState.color !== 'default' && {
  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {
    color: theme.palette[ownerState.color].main
  },
  [`&.${checkboxClasses.disabled}`]: {
    color: theme.palette.action.disabled
  }
}));

const defaultCheckedIcon = /*#__PURE__*/jsx(CheckBoxIcon, {});

const defaultIcon = /*#__PURE__*/jsx(CheckBoxOutlineBlankIcon, {});

const defaultIndeterminateIcon = /*#__PURE__*/jsx(IndeterminateCheckBoxIcon, {});

const Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {
  var _icon$props$fontSize, _indeterminateIcon$pr;

  const props = useThemeProps({
    props: inProps,
    name: 'MuiCheckbox'
  });

  const {
    checkedIcon = defaultCheckedIcon,
    color = 'primary',
    icon: iconProp = defaultIcon,
    indeterminate = false,
    indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
    inputProps,
    size = 'medium'
  } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded);

  const icon = indeterminate ? indeterminateIconProp : iconProp;
  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;

  const ownerState = _extends({}, props, {
    color,
    indeterminate,
    size
  });

  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/jsx(CheckboxRoot, _extends({
    type: "checkbox",
    inputProps: _extends({
      'data-indeterminate': indeterminate
    }, inputProps),
    icon: /*#__PURE__*/React.cloneElement(icon, {
      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
    }),
    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {
      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
    }),
    ownerState: ownerState,
    ref: ref
  }, other, {
    classes: classes
  }));
});
var MuiCheckbox = Checkbox;

export { MuiCheckbox as default };
//# sourceMappingURL=Checkbox.js.map
