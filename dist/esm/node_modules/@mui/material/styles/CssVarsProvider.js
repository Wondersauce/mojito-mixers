import _extends from '../../../@babel/runtime/helpers/esm/extends.js';
import '@emotion/styled';
import '../../../@emotion/react/dist/emotion-react.esm.js';
import '../../styled-engine/StyledEngineProvider/StyledEngineProvider.js';
import '../../styled-engine/GlobalStyles/GlobalStyles.js';
import '../../system/esm/borders.js';
import 'prop-types';
import '../../utils/esm/elementAcceptingRef.js';
import '../../utils/esm/elementTypeAcceptingRef.js';
import 'react-is';
import '../../utils/esm/ponyfillGlobal.js';
import '../../utils/esm/refType.js';
import 'react';
import '../../utils/esm/integerPropType.js';
import '../../system/esm/display.js';
import '../../system/esm/flexbox.js';
import '../../system/esm/grid.js';
import '../../system/esm/palette.js';
import '../../system/esm/positions.js';
import '../../system/esm/shadows.js';
import '../../system/esm/sizing.js';
import '../../system/esm/spacing.js';
import '../../system/esm/responsivePropType.js';
import '../../system/esm/typography.js';
import '../../system/esm/styleFunctionSx/styleFunctionSx.js';
import '../../system/esm/getThemeValue.js';
import '../../system/esm/Box/Box.js';
import '../../system/esm/useTheme.js';
import 'react/jsx-runtime';
import '../../system/esm/createStyled.js';
import '../../private-theming/ThemeProvider/ThemeProvider.js';
import '../../private-theming/useTheme/ThemeContext.js';
import '../../system/esm/ThemeProvider/ThemeProvider.js';
import createCssVarsProvider from '../../system/esm/cssVars/createCssVarsProvider.js';
import '../../system/esm/Container/createContainer.js';
import '../../system/esm/Container/Container.js';
import '../../system/esm/Container/containerClasses.js';
import extendTheme from './experimental_extendTheme.js';
import createTypography from './createTypography.js';

const defaultTheme = extendTheme();
createCssVarsProvider({
  theme: defaultTheme,
  defaultColorScheme: {
    light: 'light',
    dark: 'dark'
  },
  prefix: 'md',
  resolveTheme: theme => {
    const newTheme = _extends({}, theme, {
      typography: createTypography(theme.palette, theme.typography)
    });

    return newTheme;
  },
  shouldSkipGeneratingVar: keys => !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/)
});
//# sourceMappingURL=CssVarsProvider.js.map
