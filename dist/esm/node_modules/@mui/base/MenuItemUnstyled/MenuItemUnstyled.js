import _extends from '../../../@babel/runtime/helpers/esm/extends.js';
import _objectWithoutPropertiesLoose from '../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js';
import * as React from 'react';
import PropTypes from 'prop-types';
import clsx from '../../../clsx/dist/clsx.m.js';
import appendOwnerState from '../utils/appendOwnerState.js';
import { getMenuItemUnstyledUtilityClass } from './menuItemUnstyledClasses.js';
import useMenuItem from './useMenuItem.js';
import '../../utils/esm/elementAcceptingRef.js';
import '../../utils/esm/elementTypeAcceptingRef.js';
import 'react-is';
import '../../utils/esm/ponyfillGlobal.js';
import '../../utils/esm/refType.js';
import '../../utils/esm/integerPropType.js';
import composeClasses from '../../utils/esm/composeClasses/composeClasses.js';
import { jsx } from 'react/jsx-runtime';

const _excluded = ["children", "className", "disabled", "component", "components", "componentsProps", "label"];

function getUtilityClasses(ownerState) {
  const {
    disabled,
    focusVisible
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
  };
  return composeClasses(slots, getMenuItemUnstyledUtilityClass, {});
}
/**
 *
 * Demos:
 *
 * - [Menu](https://mui.com/base/react-menu/)
 *
 * API:
 *
 * - [MenuItemUnstyled API](https://mui.com/base/api/menu-item-unstyled/)
 */


const MenuItemUnstyled = /*#__PURE__*/React.forwardRef(function MenuItemUnstyled(props, ref) {
  var _ref, _componentsProps$root;

  const {
    children,
    className,
    disabled: disabledProp = false,
    component,
    components = {},
    componentsProps = {},
    label
  } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded);

  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'li';
  const {
    getRootProps,
    disabled,
    focusVisible
  } = useMenuItem({
    disabled: disabledProp,
    ref,
    label
  });

  const ownerState = _extends({}, props, {
    disabled,
    focusVisible
  });

  const classes = getUtilityClasses(ownerState);
  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root, getRootProps(other), {
    className: clsx(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
  }), ownerState);
  return /*#__PURE__*/jsx(Root, _extends({}, rootProps, {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? MenuItemUnstyled.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes.node,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * @ignore
   */
  component: PropTypes.elementType,

  /**
   * @ignore
   */
  components: PropTypes.shape({
    Root: PropTypes.elementType
  }),

  /**
   * @ignore
   */
  componentsProps: PropTypes.shape({
    root: PropTypes.object
  }),

  /**
   * If `true`, the menu item will be disabled.
   * @default false
   */
  disabled: PropTypes.bool,

  /**
   * A text representation of the menu item's content.
   * Used for keyboard text navigation matching.
   */
  label: PropTypes.string
} : void 0;

export { MenuItemUnstyled as default };
//# sourceMappingURL=MenuItemUnstyled.js.map
