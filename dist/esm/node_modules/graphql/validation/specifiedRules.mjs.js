import { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs.js';
import { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs.js';
import { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs.js';
import { KnownArgumentNamesRule, KnownArgumentNamesOnDirectivesRule } from './rules/KnownArgumentNamesRule.mjs.js';
import { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs.js';
import { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs.js';
import { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs.js';
import { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs.js';
import { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs.js';
import { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs.js';
import { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs.js';
import { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs.js';
import { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs.js';
import { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs.js';
import { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs.js';
import { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs.js';
import { ProvidedRequiredArgumentsRule, ProvidedRequiredArgumentsOnDirectivesRule } from './rules/ProvidedRequiredArgumentsRule.mjs.js';
import { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs.js';
import { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs.js';
import { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs.js';
import { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs.js';
import { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs.js';
import { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs.js';
import { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs.js';
import { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs.js';
import { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs.js';
import { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs.js';
import { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs.js';
import { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs.js';
import { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs.js';
import { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs.js';
import { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs.js';
import { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs.js';
import { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs.js';

// Spec Section: "Executable Definitions"

/**
 * This set includes all validation rules defined by the GraphQL spec.
 *
 * The order of the rules in this list has been adjusted to lead to the
 * most clear output when encountering multiple validation errors.
 */
Object.freeze([
  ExecutableDefinitionsRule,
  UniqueOperationNamesRule,
  LoneAnonymousOperationRule,
  SingleFieldSubscriptionsRule,
  KnownTypeNamesRule,
  FragmentsOnCompositeTypesRule,
  VariablesAreInputTypesRule,
  ScalarLeafsRule,
  FieldsOnCorrectTypeRule,
  UniqueFragmentNamesRule,
  KnownFragmentNamesRule,
  NoUnusedFragmentsRule,
  PossibleFragmentSpreadsRule,
  NoFragmentCyclesRule,
  UniqueVariableNamesRule,
  NoUndefinedVariablesRule,
  NoUnusedVariablesRule,
  KnownDirectivesRule,
  UniqueDirectivesPerLocationRule,
  KnownArgumentNamesRule,
  UniqueArgumentNamesRule,
  ValuesOfCorrectTypeRule,
  ProvidedRequiredArgumentsRule,
  VariablesInAllowedPositionRule,
  OverlappingFieldsCanBeMergedRule,
  UniqueInputFieldNamesRule,
]);
/**
 * @internal
 */

Object.freeze([
  LoneSchemaDefinitionRule,
  UniqueOperationTypesRule,
  UniqueTypeNamesRule,
  UniqueEnumValueNamesRule,
  UniqueFieldDefinitionNamesRule,
  UniqueArgumentDefinitionNamesRule,
  UniqueDirectiveNamesRule,
  KnownTypeNamesRule,
  KnownDirectivesRule,
  UniqueDirectivesPerLocationRule,
  PossibleTypeExtensionsRule,
  KnownArgumentNamesOnDirectivesRule,
  UniqueArgumentNamesRule,
  UniqueInputFieldNamesRule,
  ProvidedRequiredArgumentsOnDirectivesRule,
]);
//# sourceMappingURL=specifiedRules.mjs.js.map
