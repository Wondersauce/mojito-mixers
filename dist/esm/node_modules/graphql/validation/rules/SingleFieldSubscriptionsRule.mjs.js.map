{"version":3,"file":"SingleFieldSubscriptionsRule.mjs.js","sources":["../../../../../../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,4BAA4B,CAAC,OAAO,EAAE;AACtD,EAAE,OAAO;AACT,IAAI,mBAAmB,CAAC,IAAI,EAAE;AAC9B,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,cAAc,EAAE;AAC7C,QAAQ,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;AAC3C,QAAQ,MAAM,gBAAgB,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;AAC9D;AACA,QAAQ,IAAI,gBAAgB,EAAE;AAC9B,UAAU,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AACnE,UAAU,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACrD,UAAU,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;AACjD,UAAU,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChD;AACA,UAAU,KAAK,MAAM,UAAU,IAAI,QAAQ,CAAC,WAAW,EAAE;AACzD,YAAY,IAAI,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,mBAAmB,EAAE;AAC9D,cAAc,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC;AAC5D,aAAa;AACb,WAAW;AACX;AACA,UAAU,MAAM,MAAM,GAAG,aAAa;AACtC,YAAY,MAAM;AAClB,YAAY,SAAS;AACrB,YAAY,cAAc;AAC1B,YAAY,gBAAgB;AAC5B,YAAY,IAAI,CAAC,YAAY;AAC7B,WAAW,CAAC;AACZ;AACA,UAAU,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,EAAE;AAC/B,YAAY,MAAM,mBAAmB,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;AAC7D,YAAY,MAAM,wBAAwB,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1E,YAAY,MAAM,oBAAoB,GAAG,wBAAwB,CAAC,IAAI,EAAE,CAAC;AACzE,YAAY,OAAO,CAAC,WAAW;AAC/B,cAAc,IAAI,YAAY;AAC9B,gBAAgB,aAAa,IAAI,IAAI;AACrC,oBAAoB,CAAC,cAAc,EAAE,aAAa,CAAC,uCAAuC,CAAC;AAC3F,oBAAoB,8DAA8D;AAClF,gBAAgB;AAChB,kBAAkB,KAAK,EAAE,oBAAoB;AAC7C,iBAAiB;AACjB,eAAe;AACf,aAAa,CAAC;AACd,WAAW;AACX;AACA,UAAU,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE;AACpD,YAAY,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AACxC,YAAY,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AAC/C;AACA,YAAY,IAAI,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;AAC5C,cAAc,OAAO,CAAC,WAAW;AACjC,gBAAgB,IAAI,YAAY;AAChC,kBAAkB,aAAa,IAAI,IAAI;AACvC,sBAAsB,CAAC,cAAc,EAAE,aAAa,CAAC,mDAAmD,CAAC;AACzG,sBAAsB,0EAA0E;AAChG,kBAAkB;AAClB,oBAAoB,KAAK,EAAE,UAAU;AACrC,mBAAmB;AACnB,iBAAiB;AACjB,eAAe,CAAC;AAChB,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG,CAAC;AACJ;;;;"}