{"version":3,"file":"PossibleFragmentSpreadsRule.mjs.js","sources":["../../../../../../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,2BAA2B,CAAC,OAAO,EAAE;AACrD,EAAE,OAAO;AACT,IAAI,cAAc,CAAC,IAAI,EAAE;AACzB,MAAM,MAAM,QAAQ,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;AACzC,MAAM,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;AACjD;AACA,MAAM;AACN,QAAQ,eAAe,CAAC,QAAQ,CAAC;AACjC,QAAQ,eAAe,CAAC,UAAU,CAAC;AACnC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,UAAU,CAAC;AAClE,QAAQ;AACR,QAAQ,MAAM,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAClD,QAAQ,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC9C,QAAQ,OAAO,CAAC,WAAW;AAC3B,UAAU,IAAI,YAAY;AAC1B,YAAY,CAAC,mDAAmD,EAAE,aAAa,CAAC,wBAAwB,EAAE,WAAW,CAAC,EAAE,CAAC;AACzH,YAAY;AACZ,cAAc,KAAK,EAAE,IAAI;AACzB,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV,OAAO;AACP,KAAK;AACL;AACA,IAAI,cAAc,CAAC,IAAI,EAAE;AACzB,MAAM,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AACvC,MAAM,MAAM,QAAQ,GAAG,eAAe,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC1D,MAAM,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;AACjD;AACA,MAAM;AACN,QAAQ,QAAQ;AAChB,QAAQ,UAAU;AAClB,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,UAAU,CAAC;AAClE,QAAQ;AACR,QAAQ,MAAM,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAClD,QAAQ,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC9C,QAAQ,OAAO,CAAC,WAAW;AAC3B,UAAU,IAAI,YAAY;AAC1B,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC,4CAA4C,EAAE,aAAa,CAAC,wBAAwB,EAAE,WAAW,CAAC,EAAE,CAAC;AACvI,YAAY;AACZ,cAAc,KAAK,EAAE,IAAI;AACzB,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV,OAAO;AACP,KAAK;AACL,GAAG,CAAC;AACJ,CAAC;AACD;AACA,SAAS,eAAe,CAAC,OAAO,EAAE,IAAI,EAAE;AACxC,EAAE,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACzC;AACA,EAAE,IAAI,IAAI,EAAE;AACZ,IAAI,MAAM,IAAI,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AACtE;AACA,IAAI,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE;AAC/B,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK;AACL,GAAG;AACH;;;;"}