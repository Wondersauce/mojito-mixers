{"version":3,"file":"UniqueEnumValueNamesRule.mjs.js","sources":["../../../../../../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;AACO,SAAS,wBAAwB,CAAC,OAAO,EAAE;AAClD,EAAE,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;AACrC,EAAE,MAAM,eAAe,GAAG,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7E,EAAE,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9C,EAAE,OAAO;AACT,IAAI,kBAAkB,EAAE,oBAAoB;AAC5C,IAAI,iBAAiB,EAAE,oBAAoB;AAC3C,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,oBAAoB,CAAC,IAAI,EAAE;AACtC,IAAI,IAAI,YAAY,CAAC;AACrB;AACA,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AACrC;AACA,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;AACpC,MAAM,eAAe,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACtD,KAAK;AACL;AACA;AACA;AACA,IAAI,MAAM,UAAU;AACpB,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,MAAM,IAAI,IAAI,YAAY,KAAK,KAAK,CAAC;AACtE,UAAU,YAAY;AACtB,UAAU,EAAE,CAAC;AACb,IAAI,MAAM,UAAU,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;AACjD;AACA,IAAI,KAAK,MAAM,QAAQ,IAAI,UAAU,EAAE;AACvC,MAAM,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;AAC5C,MAAM,MAAM,YAAY,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;AACrD;AACA,MAAM,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;AACxE,QAAQ,OAAO,CAAC,WAAW;AAC3B,UAAU,IAAI,YAAY;AAC1B,YAAY,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,EAAE,SAAS,CAAC,iFAAiF,CAAC;AACnI,YAAY;AACZ,cAAc,KAAK,EAAE,QAAQ,CAAC,IAAI;AAClC,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV,OAAO,MAAM,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE;AACxC,QAAQ,OAAO,CAAC,WAAW;AAC3B,UAAU,IAAI,YAAY;AAC1B,YAAY,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,EAAE,SAAS,CAAC,2BAA2B,CAAC;AAC7E,YAAY;AACZ,cAAc,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC;AAC3D,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV,OAAO,MAAM;AACb,QAAQ,UAAU,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;AAC9C,OAAO;AACP,KAAK;AACL;AACA,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG;AACH;;;;"}