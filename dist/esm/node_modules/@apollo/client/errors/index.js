import { __extends } from '../../../tslib/tslib.es6.js';
import '../utilities/globals/index.js';
import '../../../graphql/version.mjs.js';
import '../../../graphql/language/ast.mjs.js';
import '../../../graphql/language/directiveLocation.mjs.js';
import '../../../graphql/language/kinds.mjs.js';
import '../../../graphql/language/tokenKind.mjs.js';
import '../../../graphql/jsutils/instanceOf.mjs.js';
import '../../../graphql/language/visitor.mjs.js';
import '../../../graphql/type/directives.mjs.js';
import '../../../graphql/type/introspection.mjs.js';
import '../../../graphql/validation/specifiedRules.mjs.js';
import '../../../graphql/type/scalars.mjs.js';
import '../../../graphql/validation/rules/KnownTypeNamesRule.mjs.js';
import '../../../graphql/validation/rules/PossibleTypeExtensionsRule.mjs.js';
import '../../../graphql/utilities/extendSchema.mjs.js';
import '../../../graphql/utilities/findBreakingChanges.mjs.js';
import '../utilities/graphql/storeUtils.js';
import '../utilities/graphql/transform.js';
import '../utilities/common/mergeDeep.js';
import '../utilities/observables/Observable.js';
import '../utilities/observables/Concast.js';
import '../utilities/common/canUse.js';
import { isNonEmptyArray } from '../utilities/common/arrays.js';

function isApolloError(err) {
    return err.hasOwnProperty('graphQLErrors');
}
var generateErrorMessage = function (err) {
    var message = '';
    if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {
        var errors = (err.graphQLErrors || [])
            .concat(err.clientErrors || []);
        errors.forEach(function (error) {
            var errorMessage = error
                ? error.message
                : 'Error message not found.';
            message += "".concat(errorMessage, "\n");
        });
    }
    if (err.networkError) {
        message += "".concat(err.networkError.message, "\n");
    }
    message = message.replace(/\n$/, '');
    return message;
};
var ApolloError = (function (_super) {
    __extends(ApolloError, _super);
    function ApolloError(_a) {
        var graphQLErrors = _a.graphQLErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;
        var _this = _super.call(this, errorMessage) || this;
        _this.graphQLErrors = graphQLErrors || [];
        _this.clientErrors = clientErrors || [];
        _this.networkError = networkError || null;
        _this.message = errorMessage || generateErrorMessage(_this);
        _this.extraInfo = extraInfo;
        _this.__proto__ = ApolloError.prototype;
        return _this;
    }
    return ApolloError;
}(Error));

export { ApolloError, isApolloError };
//# sourceMappingURL=index.js.map
