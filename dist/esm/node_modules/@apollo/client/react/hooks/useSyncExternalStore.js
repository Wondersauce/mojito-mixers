import '../../utilities/globals/index.js';
import * as React from 'react';
import '../../../../graphql/version.mjs.js';
import '../../../../graphql/language/ast.mjs.js';
import '../../../../graphql/language/directiveLocation.mjs.js';
import '../../../../graphql/language/kinds.mjs.js';
import '../../../../graphql/language/tokenKind.mjs.js';
import '../../../../graphql/jsutils/instanceOf.mjs.js';
import '../../../../graphql/language/visitor.mjs.js';
import '../../../../graphql/type/directives.mjs.js';
import '../../../../graphql/type/introspection.mjs.js';
import '../../../../graphql/validation/specifiedRules.mjs.js';
import '../../../../graphql/type/scalars.mjs.js';
import '../../../../graphql/validation/rules/KnownTypeNamesRule.mjs.js';
import '../../../../graphql/validation/rules/PossibleTypeExtensionsRule.mjs.js';
import '../../../../graphql/utilities/extendSchema.mjs.js';
import '../../../../graphql/utilities/findBreakingChanges.mjs.js';
import '../../utilities/graphql/storeUtils.js';
import '../../utilities/graphql/transform.js';
import '../../utilities/common/mergeDeep.js';
import '../../utilities/observables/Observable.js';
import '../../utilities/observables/Concast.js';
import { canUseLayoutEffect } from '../../utilities/common/canUse.js';
import { invariant } from '../../../../ts-invariant/lib/invariant.js';

var didWarnUncachedGetSnapshot = false;
var uSESKey = "useSyncExternalStore";
var realHook = React[uSESKey];
var useSyncExternalStore = realHook || (function (subscribe, getSnapshot, getServerSnapshot) {
    var value = getSnapshot();
    if (__DEV__ &&
        !didWarnUncachedGetSnapshot &&
        value !== getSnapshot()) {
        didWarnUncachedGetSnapshot = true;
        __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');
    }
    var _a = React.useState({ inst: { value: value, getSnapshot: getSnapshot } }), inst = _a[0].inst, forceUpdate = _a[1];
    if (canUseLayoutEffect) {
        React.useLayoutEffect(function () {
            Object.assign(inst, { value: value, getSnapshot: getSnapshot });
            if (checkIfSnapshotChanged(inst)) {
                forceUpdate({ inst: inst });
            }
        }, [subscribe, value, getSnapshot]);
    }
    else {
        Object.assign(inst, { value: value, getSnapshot: getSnapshot });
    }
    React.useEffect(function () {
        if (checkIfSnapshotChanged(inst)) {
            forceUpdate({ inst: inst });
        }
        return subscribe(function handleStoreChange() {
            if (checkIfSnapshotChanged(inst)) {
                forceUpdate({ inst: inst });
            }
        });
    }, [subscribe]);
    return value;
});
function checkIfSnapshotChanged(_a) {
    var value = _a.value, getSnapshot = _a.getSnapshot;
    try {
        return value !== getSnapshot();
    }
    catch (_b) {
        return true;
    }
}

export { useSyncExternalStore };
//# sourceMappingURL=useSyncExternalStore.js.map
