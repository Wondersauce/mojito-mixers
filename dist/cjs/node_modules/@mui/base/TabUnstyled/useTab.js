'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
require('../TabsUnstyled/TabsUnstyled.js');
var TabsContext = require('../TabsUnstyled/TabsContext.js');
require('../TabsUnstyled/tabsUnstyledClasses.js');
require('react');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
require('../../utils/esm/integerPropType.js');
require('../ButtonUnstyled/ButtonUnstyled.js');
require('../ButtonUnstyled/buttonUnstyledClasses.js');
var useButton = require('../ButtonUnstyled/useButton.js');

const _excluded = ["getRootProps"];

const useTab = props => {
  const {
    value: valueProp,
    onChange,
    onClick,
    onFocus
  } = props;

  const _useButton = useButton["default"](props),
        {
    getRootProps: getRootPropsButton
  } = _useButton,
        otherButtonProps = objectWithoutPropertiesLoose["default"](_useButton, _excluded);

  const context = TabsContext.useTabContext();

  if (context === null) {
    throw new Error('No TabContext provided');
  }

  const value = valueProp != null ? valueProp : 0;
  const selected = context.value === value;
  const selectionFollowsFocus = context.selectionFollowsFocus;
  const a11yAttributes = {
    role: 'tab',
    'aria-controls': TabsContext.getPanelId(context, value),
    id: TabsContext.getTabId(context, value),
    'aria-selected': selected,
    disabled: otherButtonProps.disabled
  };

  const handleFocus = event => {
    if (selectionFollowsFocus && !selected) {
      if (onChange) {
        onChange(event, value);
      }

      context.onSelected(event, value);
    }

    if (onFocus) {
      onFocus(event);
    }
  };

  const handleClick = event => {
    if (!selected) {
      if (onChange) {
        onChange(event, value);
      }

      context.onSelected(event, value);
    }

    if (onClick) {
      onClick(event);
    }
  };

  const getRootProps = otherHandlers => {
    const buttonResolvedProps = getRootPropsButton(_extends["default"]({
      onClick: handleClick,
      onFocus: handleFocus
    }, otherHandlers));
    return _extends["default"]({}, buttonResolvedProps, a11yAttributes);
  };

  return _extends["default"]({
    getRootProps
  }, otherButtonProps, {
    selected
  });
};

exports["default"] = useTab;
//# sourceMappingURL=useTab.js.map
