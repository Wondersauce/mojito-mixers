'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var React = require('react');
var PropTypes = require('prop-types');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
var useSwitch = require('./useSwitch.js');
var switchUnstyledClasses = require('./switchUnstyledClasses.js');
var appendOwnerState = require('../utils/appendOwnerState.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const _excluded = ["checked", "className", "component", "components", "componentsProps", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required"];

/**
 * The foundation for building custom-styled switches.
 *
 * Demos:
 *
 * - [Switch](https://mui.com/base/react-switch/)
 *
 * API:
 *
 * - [SwitchUnstyled API](https://mui.com/base/api/switch-unstyled/)
 */
const SwitchUnstyled = /*#__PURE__*/React__namespace.forwardRef(function SwitchUnstyled(props, ref) {
  var _ref, _components$Thumb, _componentsProps$thum, _components$Input, _componentsProps$inpu, _components$Track, _componentsProps$trac;

  const {
    checked: checkedProp,
    className,
    component,
    components = {},
    componentsProps = {},
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly: readOnlyProp
  } = props,
        otherProps = objectWithoutPropertiesLoose["default"](props, _excluded);

  const useSwitchProps = {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly: readOnlyProp
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible,
    readOnly
  } = useSwitch["default"](useSwitchProps);

  const ownerState = _extends["default"]({}, props, {
    checked,
    disabled,
    focusVisible,
    readOnly
  });

  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';
  const rootProps = appendOwnerState["default"](Root, _extends["default"]({}, otherProps, componentsProps.root), ownerState);
  const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';
  const thumbProps = appendOwnerState["default"](Thumb, (_componentsProps$thum = componentsProps.thumb) != null ? _componentsProps$thum : {}, ownerState);
  const Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
  const inputProps = appendOwnerState["default"](Input, (_componentsProps$inpu = componentsProps.input) != null ? _componentsProps$inpu : {}, ownerState);
  const Track = components.Track === null ? () => null : (_components$Track = components.Track) != null ? _components$Track : 'span';
  const trackProps = appendOwnerState["default"](Track, (_componentsProps$trac = componentsProps.track) != null ? _componentsProps$trac : {}, ownerState);
  const stateClasses = clsx_m["default"](checked && switchUnstyledClasses["default"].checked, disabled && switchUnstyledClasses["default"].disabled, focusVisible && switchUnstyledClasses["default"].focusVisible, readOnly && switchUnstyledClasses["default"].readOnly);
  return /*#__PURE__*/jsxRuntime.jsxs(Root, _extends["default"]({
    ref: ref
  }, rootProps, {
    className: clsx_m["default"](switchUnstyledClasses["default"].root, stateClasses, className, rootProps == null ? void 0 : rootProps.className),
    children: [/*#__PURE__*/jsxRuntime.jsx(Track, _extends["default"]({}, trackProps, {
      className: clsx_m["default"](switchUnstyledClasses["default"].track, trackProps == null ? void 0 : trackProps.className)
    })), /*#__PURE__*/jsxRuntime.jsx(Thumb, _extends["default"]({}, thumbProps, {
      className: clsx_m["default"](switchUnstyledClasses["default"].thumb, thumbProps == null ? void 0 : thumbProps.className)
    })), /*#__PURE__*/jsxRuntime.jsx(Input, _extends["default"]({}, getInputProps(inputProps), {
      className: clsx_m["default"](switchUnstyledClasses["default"].input, inputProps == null ? void 0 : inputProps.className)
    }))]
  }));
});
process.env.NODE_ENV !== "production" ? SwitchUnstyled.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * If `true`, the component is checked.
   */
  checked: PropTypes__default["default"].bool,

  /**
   * Class name applied to the root element.
   */
  className: PropTypes__default["default"].string,

  /**
   * The component used for the Root slot.
   * Either a string to use a HTML element or a component.
   * This is equivalent to `components.Root`. If both are provided, the `component` is used.
   */
  component: PropTypes__default["default"].elementType,

  /**
   * The components used for each slot inside the Switch.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: PropTypes__default["default"]
  /* @typescript-to-proptypes-ignore */
  .shape({
    Input: PropTypes__default["default"].elementType,
    Root: PropTypes__default["default"].elementType,
    Thumb: PropTypes__default["default"].elementType,
    Track: PropTypes__default["default"].oneOfType([PropTypes__default["default"].elementType, PropTypes__default["default"].oneOf([null])])
  }),

  /**
   * The props used for each slot inside the Switch.
   * @default {}
   */
  componentsProps: PropTypes__default["default"].shape({
    input: PropTypes__default["default"].object,
    root: PropTypes__default["default"].object,
    thumb: PropTypes__default["default"].object,
    track: PropTypes__default["default"].object
  }),

  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: PropTypes__default["default"].bool,

  /**
   * If `true`, the component is disabled.
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * @ignore
   */
  onBlur: PropTypes__default["default"].func,

  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: PropTypes__default["default"].func,

  /**
   * @ignore
   */
  onFocus: PropTypes__default["default"].func,

  /**
   * @ignore
   */
  onFocusVisible: PropTypes__default["default"].func,

  /**
   * If `true`, the component is read only.
   */
  readOnly: PropTypes__default["default"].bool,

  /**
   * If `true`, the `input` element is required.
   */
  required: PropTypes__default["default"].bool
} : void 0;

exports["default"] = SwitchUnstyled;
//# sourceMappingURL=SwitchUnstyled.js.map
