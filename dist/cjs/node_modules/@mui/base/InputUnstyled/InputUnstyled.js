'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var React = require('react');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
var PropTypes = require('prop-types');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
var useForkRef = require('../../utils/esm/useForkRef.js');
require('../../utils/esm/integerPropType.js');
var appendOwnerState = require('../utils/appendOwnerState.js');
var isHostComponent = require('../utils/isHostComponent.js');
var resolveComponentProps = require('../utils/resolveComponentProps.js');
var inputUnstyledClasses = require('./inputUnstyledClasses.js');
var useInput = require('./useInput.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const _excluded = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "component", "components", "componentsProps", "defaultValue", "disabled", "endAdornment", "error", "id", "maxRows", "minRows", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "rows", "type", "startAdornment", "value"],
      _excluded2 = ["ownerState"];

/**
 *
 * Demos:
 *
 * - [Input](https://mui.com/base/react-input/)
 *
 * API:
 *
 * - [InputUnstyled API](https://mui.com/base/api/input-unstyled/)
 */
const InputUnstyled = /*#__PURE__*/React__namespace.forwardRef(function InputUnstyled(props, forwardedRef) {
  var _ref, _components$Input;

  const {
    'aria-describedby': ariaDescribedby,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby,
    autoComplete,
    autoFocus,
    className,
    component,
    components = {},
    componentsProps = {},
    defaultValue,
    disabled,
    endAdornment,
    error,
    id,
    maxRows,
    minRows,
    multiline = false,
    name,
    onClick,
    onChange,
    onKeyDown,
    onKeyUp,
    onFocus,
    onBlur,
    placeholder,
    readOnly,
    required,
    rows,
    type = 'text',
    startAdornment,
    value
  } = props,
        other = objectWithoutPropertiesLoose["default"](props, _excluded);

  const {
    getRootProps,
    getInputProps,
    focused,
    formControlContext,
    error: errorState,
    disabled: disabledState
  } = useInput["default"]({
    disabled,
    defaultValue,
    error,
    onBlur,
    onClick,
    onChange,
    onFocus,
    required,
    value
  });

  const ownerState = _extends["default"]({}, props, {
    disabled: disabledState,
    error: errorState,
    focused,
    formControlContext,
    multiline,
    type
  });

  const rootStateClasses = clsx_m["default"](disabledState && inputUnstyledClasses["default"].disabled, errorState && inputUnstyledClasses["default"].error, focused && inputUnstyledClasses["default"].focused, Boolean(formControlContext) && inputUnstyledClasses["default"].formControl, multiline && inputUnstyledClasses["default"].multiline, Boolean(startAdornment) && inputUnstyledClasses["default"].adornedStart, Boolean(endAdornment) && inputUnstyledClasses["default"].adornedEnd);
  const inputStateClasses = clsx_m["default"](disabledState && inputUnstyledClasses["default"].disabled, multiline && inputUnstyledClasses["default"].multiline);
  const propsToForward = {
    'aria-describedby': ariaDescribedby,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby,
    autoComplete,
    autoFocus,
    id,
    onKeyDown,
    onKeyUp,
    name,
    placeholder,
    readOnly,
    type
  };
  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
  const rootComponentsProps = resolveComponentProps["default"](componentsProps.root, ownerState);
  const rootProps = appendOwnerState["default"](Root, _extends["default"]({}, getRootProps(_extends["default"]({}, other, rootComponentsProps)), {
    className: clsx_m["default"](inputUnstyledClasses["default"].root, rootStateClasses, className, rootComponentsProps == null ? void 0 : rootComponentsProps.className)
  }), ownerState);
  rootProps.ref = useForkRef["default"](rootProps.ref, useForkRef["default"](rootComponentsProps == null ? void 0 : rootComponentsProps.ref, forwardedRef));
  let Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
  const inputComponentsProps = resolveComponentProps["default"](componentsProps.input, ownerState);
  let inputProps = appendOwnerState["default"](Input, _extends["default"]({}, getInputProps(_extends["default"]({}, inputComponentsProps, propsToForward)), {
    className: clsx_m["default"](inputUnstyledClasses["default"].input, inputStateClasses, inputComponentsProps == null ? void 0 : inputComponentsProps.className)
  }), ownerState);
  inputProps.ref = useForkRef["default"](inputProps.ref, inputComponentsProps == null ? void 0 : inputComponentsProps.ref);

  if (multiline) {
    var _components$Textarea, _components$Textarea2;

    const hasHostTextarea = isHostComponent["default"]((_components$Textarea = components.Textarea) != null ? _components$Textarea : 'textarea');

    const inputPropsWithoutOwnerState = objectWithoutPropertiesLoose["default"](inputProps, _excluded2);

    if (rows) {
      if (process.env.NODE_ENV !== 'production') {
        if (minRows || maxRows) {
          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
        }
      }
    }

    inputProps = _extends["default"]({}, !hasHostTextarea && {
      minRows: rows || minRows,
      maxRows: rows || maxRows
    }, hasHostTextarea ? inputPropsWithoutOwnerState : inputProps, {
      type: undefined
    });
    Input = (_components$Textarea2 = components.Textarea) != null ? _components$Textarea2 : 'textarea';
  }

  return /*#__PURE__*/jsxRuntime.jsxs(Root, _extends["default"]({}, rootProps, {
    children: [startAdornment, /*#__PURE__*/jsxRuntime.jsx(Input, _extends["default"]({}, inputProps)), endAdornment]
  }));
});
process.env.NODE_ENV !== "production" ? InputUnstyled.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  'aria-describedby': PropTypes__default["default"].string,

  /**
   * @ignore
   */
  'aria-label': PropTypes__default["default"].string,

  /**
   * @ignore
   */
  'aria-labelledby': PropTypes__default["default"].string,

  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: PropTypes__default["default"].string,

  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: PropTypes__default["default"].bool,

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node,

  /**
   * Class name applied to the root element.
   */
  className: PropTypes__default["default"].string,

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes__default["default"].elementType,

  /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: PropTypes__default["default"].shape({
    Input: PropTypes__default["default"].elementType,
    Root: PropTypes__default["default"].elementType,
    Textarea: PropTypes__default["default"].elementType
  }),

  /**
   * The props used for each slot inside the Input.
   * @default {}
   */
  componentsProps: PropTypes__default["default"].shape({
    input: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object]),
    root: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object])
  }),

  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: PropTypes__default["default"].any,

  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Trailing adornment for this input.
   */
  endAdornment: PropTypes__default["default"].node,

  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: PropTypes__default["default"].bool,

  /**
   * The id of the `input` element.
   */
  id: PropTypes__default["default"].string,

  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: PropTypes__default["default"].number,

  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: PropTypes__default["default"].number,

  /**
   * If `true`, a `textarea` element is rendered.
   * @default false
   */
  multiline: PropTypes__default["default"].bool,

  /**
   * Name attribute of the `input` element.
   */
  name: PropTypes__default["default"].string,

  /**
   * @ignore
   */
  onBlur: PropTypes__default["default"].func,

  /**
   * @ignore
   */
  onChange: PropTypes__default["default"].func,

  /**
   * @ignore
   */
  onClick: PropTypes__default["default"].func,

  /**
   * @ignore
   */
  onFocus: PropTypes__default["default"].func,

  /**
   * @ignore
   */
  onKeyDown: PropTypes__default["default"].func,

  /**
   * @ignore
   */
  onKeyUp: PropTypes__default["default"].func,

  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: PropTypes__default["default"].string,

  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: PropTypes__default["default"].bool,

  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: PropTypes__default["default"].bool,

  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: PropTypes__default["default"].number,

  /**
   * Leading adornment for this input.
   */
  startAdornment: PropTypes__default["default"].node,

  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: PropTypes__default["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOf(['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week']),

  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: PropTypes__default["default"].any
} : void 0;

exports["default"] = InputUnstyled;
//# sourceMappingURL=InputUnstyled.js.map
