'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var React = require('react');
var PropTypes = require('prop-types');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
var useControlled = require('../../utils/esm/useControlled.js');
require('../../utils/esm/integerPropType.js');
var FormControlUnstyledContext = require('./FormControlUnstyledContext.js');
var appendOwnerState = require('../utils/appendOwnerState.js');
var formControlUnstyledClasses = require('./formControlUnstyledClasses.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const _excluded = ["defaultValue", "children", "className", "component", "components", "componentsProps", "disabled", "error", "onChange", "required", "value"];

function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';
}
/**
 * Provides context such as filled/focused/error/required for form inputs.
 * Relying on the context provides high flexibility and ensures that the state always stays
 * consistent across the children of the `FormControl`.
 * This context is used by the following components:
 *
 * *   FormLabel
 * *   FormHelperText
 * *   Input
 * *   InputLabel
 *
 * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).
 *
 * ```jsx
 * <FormControl>
 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
 *   <Input id="my-input" aria-describedby="my-helper-text" />
 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
 * </FormControl>
 * ```
 *
 * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.
 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
 *
 * Demos:
 *
 * - [Form control](https://mui.com/base/react-form-control/)
 *
 * API:
 *
 * - [FormControlUnstyled API](https://mui.com/base/api/form-control-unstyled/)
 */


const FormControlUnstyled = /*#__PURE__*/React__namespace.forwardRef(function FormControlUnstyled(props, ref) {
  var _ref;

  const {
    defaultValue,
    children,
    className,
    component,
    components = {},
    componentsProps = {},
    disabled = false,
    error = false,
    onChange,
    required = false,
    value: incomingValue
  } = props,
        other = objectWithoutPropertiesLoose["default"](props, _excluded);

  const [value, setValue] = useControlled["default"]({
    controlled: incomingValue,
    default: defaultValue,
    name: 'FormControl',
    state: 'value'
  });
  const filled = hasValue(value);
  const [focused, setFocused] = React__namespace.useState(false);

  if (disabled && focused) {
    setFocused(false);
  }

  const ownerState = _extends["default"]({}, props, {
    disabled,
    error,
    filled,
    focused,
    required
  });

  const handleChange = event => {
    setValue(event.target.value);
    onChange == null ? void 0 : onChange(event);
  };

  const childContext = {
    disabled,
    error,
    filled,
    focused,
    onBlur: () => {
      setFocused(false);
    },
    onChange: handleChange,
    onFocus: () => {
      setFocused(true);
    },
    required,
    value: value != null ? value : ''
  };
  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
  const rootProps = appendOwnerState["default"](Root, _extends["default"]({}, other, componentsProps.root), ownerState);

  const renderChildren = () => {
    if (typeof children === 'function') {
      return children(childContext);
    }

    return children;
  };

  return /*#__PURE__*/jsxRuntime.jsx(FormControlUnstyledContext["default"].Provider, {
    value: childContext,
    children: /*#__PURE__*/jsxRuntime.jsx(Root, _extends["default"]({
      ref: ref
    }, rootProps, {
      className: clsx_m["default"](formControlUnstyledClasses["default"].root, className, rootProps == null ? void 0 : rootProps.className, disabled && formControlUnstyledClasses["default"].disabled, error && formControlUnstyledClasses["default"].error, filled && formControlUnstyledClasses["default"].filled, focused && formControlUnstyledClasses["default"].focused, required && formControlUnstyledClasses["default"].required),
      children: renderChildren()
    }))
  });
});
process.env.NODE_ENV !== "production" ? FormControlUnstyled.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * The content of the component.
   */
  children: PropTypes__default["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes__default["default"].node, PropTypes__default["default"].func]),

  /**
   * Class name applied to the root element.
   */
  className: PropTypes__default["default"].string,

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes__default["default"].elementType,

  /**
   * The components used for each slot inside the FormControl.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: PropTypes__default["default"].shape({
    Root: PropTypes__default["default"].elementType
  }),

  /**
   * @ignore
   */
  componentsProps: PropTypes__default["default"].shape({
    root: PropTypes__default["default"].object
  }),

  /**
   * @ignore
   */
  defaultValue: PropTypes__default["default"].any,

  /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: PropTypes__default["default"].bool,

  /**
   * @ignore
   */
  onChange: PropTypes__default["default"].func,

  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: PropTypes__default["default"].bool,

  /**
   * @ignore
   */
  value: PropTypes__default["default"].any
} : void 0;

exports["default"] = FormControlUnstyled;
//# sourceMappingURL=FormControlUnstyled.js.map
