'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var React = require('react');
var PropTypes = require('prop-types');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
require('../../utils/esm/integerPropType.js');
var composeClasses = require('../../utils/esm/composeClasses/composeClasses.js');
var appendOwnerState = require('../utils/appendOwnerState.js');
var useBadge = require('./useBadge.js');
var badgeUnstyledClasses = require('./badgeUnstyledClasses.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const _excluded = ["badgeContent", "component", "children", "className", "components", "componentsProps", "invisible", "max", "showZero"];

const useUtilityClasses = ownerState => {
  const {
    invisible
  } = ownerState;
  const slots = {
    root: ['root'],
    badge: ['badge', invisible && 'invisible']
  };
  return composeClasses["default"](slots, badgeUnstyledClasses.getBadgeUnstyledUtilityClass, undefined);
};

const BadgeUnstyled = /*#__PURE__*/React__namespace.forwardRef(function BadgeUnstyled(props, ref) {
  const {
    component,
    children,
    className,
    components = {},
    componentsProps = {},
    max: maxProp = 99,
    showZero = false
  } = props,
        other = objectWithoutPropertiesLoose["default"](props, _excluded);

  const {
    badgeContent,
    max,
    displayValue,
    invisible
  } = useBadge["default"](_extends["default"]({}, props, {
    max: maxProp
  }));

  const ownerState = _extends["default"]({}, props, {
    badgeContent,
    invisible,
    max,
    showZero
  });

  const classes = useUtilityClasses(ownerState);
  const Root = component || components.Root || 'span';
  const rootProps = appendOwnerState["default"](Root, _extends["default"]({}, other, componentsProps.root), ownerState);
  const Badge = components.Badge || 'span';
  const badgeProps = appendOwnerState["default"](Badge, componentsProps.badge, ownerState);
  return /*#__PURE__*/jsxRuntime.jsxs(Root, _extends["default"]({}, rootProps, {
    ref: ref
  }, other, {
    className: clsx_m["default"](classes.root, rootProps.className, className),
    children: [children, /*#__PURE__*/jsxRuntime.jsx(Badge, _extends["default"]({}, badgeProps, {
      className: clsx_m["default"](classes.badge, badgeProps.className),
      children: displayValue
    }))]
  }));
});
process.env.NODE_ENV !== "production" ? BadgeUnstyled.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The content rendered within the badge.
   */
  badgeContent: PropTypes__default["default"].node,

  /**
   * The badge will be added relative to this node.
   */
  children: PropTypes__default["default"].node,

  /**
   * @ignore
   */
  className: PropTypes__default["default"].string,

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes__default["default"].elementType,

  /**
   * The components used for each slot inside the Badge.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: PropTypes__default["default"].shape({
    Badge: PropTypes__default["default"].elementType,
    Root: PropTypes__default["default"].elementType
  }),

  /**
   * The props used for each slot inside the Badge.
   * @default {}
   */
  componentsProps: PropTypes__default["default"].shape({
    badge: PropTypes__default["default"].object,
    root: PropTypes__default["default"].object
  }),

  /**
   * If `true`, the badge is invisible.
   * @default false
   */
  invisible: PropTypes__default["default"].bool,

  /**
   * Max count to show.
   * @default 99
   */
  max: PropTypes__default["default"].number,

  /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */
  showZero: PropTypes__default["default"].bool
} : void 0;

exports["default"] = BadgeUnstyled;
//# sourceMappingURL=BadgeUnstyled.js.map
