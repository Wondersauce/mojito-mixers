'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
var PropTypes = require('prop-types');
var React = require('react');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
require('../../utils/esm/integerPropType.js');
var composeClasses = require('../../utils/esm/composeClasses/composeClasses.js');
var optionGroupUnstyledClasses = require('./optionGroupUnstyledClasses.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const _excluded = ["className", "component", "components", "disabled", "componentsProps"];

function useUtilityClasses(disabled) {
  const slots = {
    root: ['root', disabled && 'disabled'],
    label: ['label'],
    list: ['list']
  };
  return composeClasses["default"](slots, optionGroupUnstyledClasses.getOptionGroupUnstyledUtilityClass, {});
}
/**
 * An unstyled option group to be used within a SelectUnstyled.
 *
 * Demos:
 *
 * - [Select](https://mui.com/base/react-select/)
 *
 * API:
 *
 * - [OptionGroupUnstyled API](https://mui.com/base/api/option-group-unstyled/)
 */


const OptionGroupUnstyled = /*#__PURE__*/React__default["default"].forwardRef(function OptionGroupUnstyled(props, ref) {
  var _componentsProps$root, _componentsProps$labe, _componentsProps$list;

  const {
    className,
    component,
    components = {},
    disabled = false,
    componentsProps = {}
  } = props,
        other = objectWithoutPropertiesLoose["default"](props, _excluded);

  const Root = component || (components == null ? void 0 : components.Root) || 'li';
  const Label = (components == null ? void 0 : components.Label) || 'span';
  const List = (components == null ? void 0 : components.List) || 'ul';
  const classes = useUtilityClasses(disabled);

  const rootProps = _extends["default"]({}, other, {
    ref
  }, componentsProps.root, {
    className: clsx_m["default"](classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
  });

  const labelProps = _extends["default"]({}, componentsProps.label, {
    className: clsx_m["default"](classes.label, (_componentsProps$labe = componentsProps.label) == null ? void 0 : _componentsProps$labe.className)
  });

  const listProps = _extends["default"]({}, componentsProps.list, {
    className: clsx_m["default"](classes.list, (_componentsProps$list = componentsProps.list) == null ? void 0 : _componentsProps$list.className)
  });

  return /*#__PURE__*/jsxRuntime.jsxs(Root, _extends["default"]({}, rootProps, {
    children: [/*#__PURE__*/jsxRuntime.jsx(Label, _extends["default"]({}, labelProps, {
      children: props.label
    })), /*#__PURE__*/jsxRuntime.jsx(List, _extends["default"]({}, listProps, {
      children: props.children
    }))]
  }));
});
process.env.NODE_ENV !== "production" ? OptionGroupUnstyled.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node,

  /**
   * @ignore
   */
  className: PropTypes__default["default"].string,

  /**
   * The component used for the Root slot.
   * Either a string to use a HTML element or a component.
   * This is equivalent to components.Root.
   * If both are provided, the component is used.
   */
  component: PropTypes__default["default"].elementType,

  /**
   * The components used for each slot inside the OptionGroupUnstyled.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: PropTypes__default["default"].shape({
    Label: PropTypes__default["default"].elementType,
    List: PropTypes__default["default"].elementType,
    Root: PropTypes__default["default"].elementType
  }),

  /**
   * The props used for each slot inside the Input.
   * @default {}
   */
  componentsProps: PropTypes__default["default"].shape({
    label: PropTypes__default["default"].object,
    list: PropTypes__default["default"].object,
    root: PropTypes__default["default"].object
  }),

  /**
   * If `true` all the options in the group will be disabled.
   * @default false
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * The human-readable description of the group.
   */
  label: PropTypes__default["default"].node
} : void 0;

exports["default"] = OptionGroupUnstyled;
//# sourceMappingURL=OptionGroupUnstyled.js.map
