'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var React = require('react');
var index = require('../../../prop-types/index.js');
var system = require('@mui/system');
var SwitchBase = require('../internal/SwitchBase.js');
var CheckBoxOutlineBlank = require('../internal/svg-icons/CheckBoxOutlineBlank.js');
var CheckBox = require('../internal/svg-icons/CheckBox.js');
var IndeterminateCheckBox = require('../internal/svg-icons/IndeterminateCheckBox.js');
var useThemeProps = require('../styles/useThemeProps.js');
var styled = require('../styles/styled.js');
var checkboxClasses = require('./checkboxClasses.js');
var require$$2 = require('react/jsx-runtime');
var capitalize = require('../../utils/esm/capitalize.js');
var refType = require('../../utils/esm/refType.js');
var composeClasses = require('../../base/composeClasses/composeClasses.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

const _excluded = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"];

const useUtilityClasses = ownerState => {
  const {
    classes,
    indeterminate,
    color
  } = ownerState;
  const slots = {
    root: ['root', indeterminate && 'indeterminate', `color${capitalize["default"](color)}`]
  };
  const composedClasses = composeClasses["default"](slots, checkboxClasses.getCheckboxUtilityClass, classes);
  return _extends["default"]({}, classes, composedClasses);
};

const CheckboxRoot = styled["default"](SwitchBase["default"], {
  shouldForwardProp: prop => styled.rootShouldForwardProp(prop) || prop === 'classes',
  name: 'MuiCheckbox',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize["default"](ownerState.color)}`]];
  }
})(({
  theme,
  ownerState
}) => _extends["default"]({
  color: theme.palette.text.secondary
}, !ownerState.disableRipple && {
  '&:hover': {
    backgroundColor: system.alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    '@media (hover: none)': {
      backgroundColor: 'transparent'
    }
  }
}, ownerState.color !== 'default' && {
  [`&.${checkboxClasses["default"].checked}, &.${checkboxClasses["default"].indeterminate}`]: {
    color: theme.palette[ownerState.color].main
  },
  [`&.${checkboxClasses["default"].disabled}`]: {
    color: theme.palette.action.disabled
  }
}));

const defaultCheckedIcon = /*#__PURE__*/require$$2.jsx(CheckBox["default"], {});

const defaultIcon = /*#__PURE__*/require$$2.jsx(CheckBoxOutlineBlank["default"], {});

const defaultIndeterminateIcon = /*#__PURE__*/require$$2.jsx(IndeterminateCheckBox["default"], {});

const Checkbox = /*#__PURE__*/React__namespace.forwardRef(function Checkbox(inProps, ref) {
  var _icon$props$fontSize, _indeterminateIcon$pr;

  const props = useThemeProps["default"]({
    props: inProps,
    name: 'MuiCheckbox'
  });

  const {
    checkedIcon = defaultCheckedIcon,
    color = 'primary',
    icon: iconProp = defaultIcon,
    indeterminate = false,
    indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
    inputProps,
    size = 'medium'
  } = props,
        other = objectWithoutPropertiesLoose["default"](props, _excluded);

  const icon = indeterminate ? indeterminateIconProp : iconProp;
  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;

  const ownerState = _extends["default"]({}, props, {
    color,
    indeterminate,
    size
  });

  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/require$$2.jsx(CheckboxRoot, _extends["default"]({
    type: "checkbox",
    inputProps: _extends["default"]({
      'data-indeterminate': indeterminate
    }, inputProps),
    icon: /*#__PURE__*/React__namespace.cloneElement(icon, {
      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
    }),
    checkedIcon: /*#__PURE__*/React__namespace.cloneElement(indeterminateIcon, {
      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
    }),
    ownerState: ownerState,
    ref: ref
  }, other, {
    classes: classes
  }));
});
process.env.NODE_ENV !== "production" ? Checkbox.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * If `true`, the component is checked.
   */
  checked: index["default"].bool,

  /**
   * The icon to display when the component is checked.
   * @default <CheckBoxIcon />
   */
  checkedIcon: index["default"].node,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: index["default"].object,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: index["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([index["default"].oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), index["default"].string]),

  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: index["default"].bool,

  /**
   * If `true`, the component is disabled.
   */
  disabled: index["default"].bool,

  /**
   * If `true`, the ripple effect is disabled.
   */
  disableRipple: index["default"].bool,

  /**
   * The icon to display when the component is unchecked.
   * @default <CheckBoxOutlineBlankIcon />
   */
  icon: index["default"].node,

  /**
   * The id of the `input` element.
   */
  id: index["default"].string,

  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the `input`.
   * @default false
   */
  indeterminate: index["default"].bool,

  /**
   * The icon to display when the component is indeterminate.
   * @default <IndeterminateCheckBoxIcon />
   */
  indeterminateIcon: index["default"].node,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: index["default"].object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType["default"],

  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: index["default"].func,

  /**
   * If `true`, the `input` element is required.
   */
  required: index["default"].bool,

  /**
   * The size of the component.
   * `small` is equivalent to the dense checkbox styling.
   * @default 'medium'
   */
  size: index["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([index["default"].oneOf(['medium', 'small']), index["default"].string]),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: index["default"].oneOfType([index["default"].arrayOf(index["default"].oneOfType([index["default"].func, index["default"].object, index["default"].bool])), index["default"].func, index["default"].object]),

  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: index["default"].any
} : void 0;
var MuiCheckbox = Checkbox;

exports["default"] = MuiCheckbox;
//# sourceMappingURL=Checkbox.js.map
