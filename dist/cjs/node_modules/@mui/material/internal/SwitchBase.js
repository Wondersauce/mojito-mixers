'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var React = require('react');
var index = require('../../../prop-types/index.js');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
var styled = require('../styles/styled.js');
var useFormControl = require('../FormControl/useFormControl.js');
var switchBaseClasses = require('./switchBaseClasses.js');
var require$$2 = require('react/jsx-runtime');
var ButtonBase = require('../ButtonBase/ButtonBase.js');
var composeClasses = require('../../base/composeClasses/composeClasses.js');
var refType = require('../../utils/esm/refType.js');
var useControlled = require('../../utils/esm/useControlled.js');
var capitalize = require('../../utils/esm/capitalize.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

const _excluded = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];

const useUtilityClasses = ownerState => {
  const {
    classes,
    checked,
    disabled,
    edge
  } = ownerState;
  const slots = {
    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize["default"](edge)}`],
    input: ['input']
  };
  return composeClasses["default"](slots, switchBaseClasses.getSwitchBaseUtilityClass, classes);
};

const SwitchBaseRoot = styled["default"](ButtonBase["default"])(({
  ownerState
}) => _extends["default"]({
  padding: 9,
  borderRadius: '50%'
}, ownerState.edge === 'start' && {
  marginLeft: ownerState.size === 'small' ? -3 : -12
}, ownerState.edge === 'end' && {
  marginRight: ownerState.size === 'small' ? -3 : -12
}));
const SwitchBaseInput = styled["default"]('input')({
  cursor: 'inherit',
  position: 'absolute',
  opacity: 0,
  width: '100%',
  height: '100%',
  top: 0,
  left: 0,
  margin: 0,
  padding: 0,
  zIndex: 1
});
/**
 * @ignore - internal component.
 */

const SwitchBase = /*#__PURE__*/React__namespace.forwardRef(function SwitchBase(props, ref) {
  const {
    autoFocus,
    checked: checkedProp,
    checkedIcon,
    className,
    defaultChecked,
    disabled: disabledProp,
    disableFocusRipple = false,
    edge = false,
    icon,
    id,
    inputProps,
    inputRef,
    name,
    onBlur,
    onChange,
    onFocus,
    readOnly,
    required,
    tabIndex,
    type,
    value
  } = props,
        other = objectWithoutPropertiesLoose["default"](props, _excluded);

  const [checked, setCheckedState] = useControlled["default"]({
    controlled: checkedProp,
    default: Boolean(defaultChecked),
    name: 'SwitchBase',
    state: 'checked'
  });
  const muiFormControl = useFormControl["default"]();

  const handleFocus = event => {
    if (onFocus) {
      onFocus(event);
    }

    if (muiFormControl && muiFormControl.onFocus) {
      muiFormControl.onFocus(event);
    }
  };

  const handleBlur = event => {
    if (onBlur) {
      onBlur(event);
    }

    if (muiFormControl && muiFormControl.onBlur) {
      muiFormControl.onBlur(event);
    }
  };

  const handleInputChange = event => {
    // Workaround for https://github.com/facebook/react/issues/9023
    if (event.nativeEvent.defaultPrevented) {
      return;
    }

    const newChecked = event.target.checked;
    setCheckedState(newChecked);

    if (onChange) {
      // TODO v6: remove the second argument.
      onChange(event, newChecked);
    }
  };

  let disabled = disabledProp;

  if (muiFormControl) {
    if (typeof disabled === 'undefined') {
      disabled = muiFormControl.disabled;
    }
  }

  const hasLabelFor = type === 'checkbox' || type === 'radio';

  const ownerState = _extends["default"]({}, props, {
    checked,
    disabled,
    disableFocusRipple,
    edge
  });

  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/require$$2.jsxs(SwitchBaseRoot, _extends["default"]({
    component: "span",
    className: clsx_m["default"](classes.root, className),
    centerRipple: true,
    focusRipple: !disableFocusRipple,
    disabled: disabled,
    tabIndex: null,
    role: undefined,
    onFocus: handleFocus,
    onBlur: handleBlur,
    ownerState: ownerState,
    ref: ref
  }, other, {
    children: [/*#__PURE__*/require$$2.jsx(SwitchBaseInput, _extends["default"]({
      autoFocus: autoFocus,
      checked: checkedProp,
      defaultChecked: defaultChecked,
      className: classes.input,
      disabled: disabled,
      id: hasLabelFor && id,
      name: name,
      onChange: handleInputChange,
      readOnly: readOnly,
      ref: inputRef,
      required: required,
      ownerState: ownerState,
      tabIndex: tabIndex,
      type: type
    }, type === 'checkbox' && value === undefined ? {} : {
      value
    }, inputProps)), checked ? checkedIcon : icon]
  }));
}); // NB: If changed, please update Checkbox, Switch and Radio
// so that the API documentation is updated.

process.env.NODE_ENV !== "production" ? SwitchBase.propTypes = {
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: index["default"].bool,

  /**
   * If `true`, the component is checked.
   */
  checked: index["default"].bool,

  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: index["default"].node.isRequired,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: index["default"].object,

  /**
   * @ignore
   */
  className: index["default"].string,

  /**
   * @ignore
   */
  defaultChecked: index["default"].bool,

  /**
   * If `true`, the component is disabled.
   */
  disabled: index["default"].bool,

  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: index["default"].bool,

  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: index["default"].oneOf(['end', 'start', false]),

  /**
   * The icon to display when the component is unchecked.
   */
  icon: index["default"].node.isRequired,

  /**
   * The id of the `input` element.
   */
  id: index["default"].string,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: index["default"].object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType["default"],

  /*
   * @ignore
   */
  name: index["default"].string,

  /**
   * @ignore
   */
  onBlur: index["default"].func,

  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: index["default"].func,

  /**
   * @ignore
   */
  onFocus: index["default"].func,

  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: index["default"].bool,

  /**
   * If `true`, the `input` element is required.
   */
  required: index["default"].bool,

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: index["default"].object,

  /**
   * @ignore
   */
  tabIndex: index["default"].oneOfType([index["default"].number, index["default"].string]),

  /**
   * The input component prop `type`.
   */
  type: index["default"].string.isRequired,

  /**
   * The value of the component.
   */
  value: index["default"].any
} : void 0;
var SwitchBase$1 = SwitchBase;

exports["default"] = SwitchBase$1;
//# sourceMappingURL=SwitchBase.js.map
