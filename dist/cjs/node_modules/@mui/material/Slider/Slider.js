'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var React = require('react');
var PropTypes = require('prop-types');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
var chainPropTypes = require('../../utils/esm/chainPropTypes.js');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
var capitalize = require('../../utils/esm/capitalize.js');
require('../../utils/esm/integerPropType.js');
var generateUtilityClasses = require('../../utils/esm/generateUtilityClasses/generateUtilityClasses.js');
require('../../base/BadgeUnstyled/BadgeUnstyled.js');
require('../../base/BadgeUnstyled/badgeUnstyledClasses.js');
require('../../base/ButtonUnstyled/ButtonUnstyled.js');
require('../../base/ButtonUnstyled/buttonUnstyledClasses.js');
require('../../base/ClickAwayListener/ClickAwayListener.js');
require('../../base/FormControlUnstyled/FormControlUnstyled.js');
require('../../base/FormControlUnstyled/FormControlUnstyledContext.js');
require('../../base/FormControlUnstyled/formControlUnstyledClasses.js');
require('../../base/InputUnstyled/InputUnstyled.js');
require('../../base/InputUnstyled/inputUnstyledClasses.js');
require('../../base/ListboxUnstyled/useListbox.types.js');
require('../../base/MenuUnstyled/MenuUnstyled.js');
require('../../base/MenuUnstyled/MenuUnstyledContext.js');
require('../../base/MenuUnstyled/menuUnstyledClasses.js');
require('../../base/MenuItemUnstyled/MenuItemUnstyled.js');
require('../../base/MenuItemUnstyled/menuItemUnstyledClasses.js');
require('../../base/ModalUnstyled/ModalUnstyled.js');
require('../../base/ModalUnstyled/modalUnstyledClasses.js');
require('../../base/MultiSelectUnstyled/MultiSelectUnstyled.js');
require('../../base/NoSsr/NoSsr.js');
require('../../base/OptionGroupUnstyled/OptionGroupUnstyled.js');
require('../../base/OptionGroupUnstyled/optionGroupUnstyledClasses.js');
require('../../base/OptionUnstyled/OptionUnstyled.js');
require('../../base/OptionUnstyled/optionUnstyledClasses.js');
require('../../base/PopperUnstyled/PopperUnstyled.js');
require('../../base/Portal/Portal.js');
require('../../base/SelectUnstyled/SelectUnstyled.js');
require('../../base/SelectUnstyled/selectUnstyledClasses.js');
var SliderUnstyled = require('../../base/SliderUnstyled/SliderUnstyled.js');
var SliderValueLabelUnstyled = require('../../base/SliderUnstyled/SliderValueLabelUnstyled.js');
var sliderUnstyledClasses = require('../../base/SliderUnstyled/sliderUnstyledClasses.js');
require('../../base/SwitchUnstyled/SwitchUnstyled.js');
require('../../base/SwitchUnstyled/switchUnstyledClasses.js');
require('../../base/TabPanelUnstyled/TabPanelUnstyled.js');
require('../../base/TabPanelUnstyled/tabPanelUnstyledClasses.js');
require('../../base/TabsUnstyled/TabsUnstyled.js');
require('../../base/TabsUnstyled/TabsContext.js');
require('../../base/TabsUnstyled/tabsUnstyledClasses.js');
require('../../base/TabsListUnstyled/TabsListUnstyled.js');
require('../../base/TabsListUnstyled/tabsListUnstyledClasses.js');
require('../../base/TabUnstyled/TabUnstyled.js');
require('../../base/TabUnstyled/tabUnstyledClasses.js');
require('../../base/TextareaAutosize/TextareaAutosize.js');
require('../../base/TrapFocus/TrapFocus.js');
require('@emotion/styled');
require('../../../@emotion/react/dist/emotion-react.esm.js');
require('../../styled-engine/StyledEngineProvider/StyledEngineProvider.js');
require('../../styled-engine/GlobalStyles/GlobalStyles.js');
require('../../system/esm/borders.js');
require('../../system/esm/display.js');
require('../../system/esm/flexbox.js');
require('../../system/esm/grid.js');
require('../../system/esm/palette.js');
require('../../system/esm/positions.js');
require('../../system/esm/shadows.js');
require('../../system/esm/sizing.js');
require('../../system/esm/spacing.js');
require('../../system/esm/responsivePropType.js');
require('../../system/esm/typography.js');
require('../../system/esm/styleFunctionSx/styleFunctionSx.js');
require('../../system/esm/getThemeValue.js');
require('../../system/esm/Box/Box.js');
require('../../system/esm/useTheme.js');
var jsxRuntime = require('react/jsx-runtime');
require('../../system/esm/createStyled.js');
require('../../private-theming/ThemeProvider/ThemeProvider.js');
require('../../private-theming/useTheme/ThemeContext.js');
var colorManipulator = require('../../system/esm/colorManipulator.js');
require('../../system/esm/ThemeProvider/ThemeProvider.js');
require('../../system/esm/Container/createContainer.js');
require('../../system/esm/Container/Container.js');
require('../../system/esm/Container/containerClasses.js');
var useThemeProps = require('../styles/useThemeProps.js');
var styled = require('../styles/styled.js');
var useTheme = require('../styles/useTheme.js');
var shouldSpreadAdditionalProps = require('../utils/shouldSpreadAdditionalProps.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const _excluded = ["component", "components", "componentsProps", "color", "size"];
const sliderClasses = _extends["default"]({}, sliderUnstyledClasses["default"], generateUtilityClasses["default"]('MuiSlider', ['colorPrimary', 'colorSecondary', 'thumbColorPrimary', 'thumbColorSecondary', 'sizeSmall', 'thumbSizeSmall']));
const SliderRoot = styled["default"]('span', {
  name: 'MuiSlider',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[`color${capitalize["default"](ownerState.color)}`], ownerState.size !== 'medium' && styles[`size${capitalize["default"](ownerState.size)}`], ownerState.marked && styles.marked, ownerState.orientation === 'vertical' && styles.vertical, ownerState.track === 'inverted' && styles.trackInverted, ownerState.track === false && styles.trackFalse];
  }
})(({
  theme,
  ownerState
}) => _extends["default"]({
  borderRadius: 12,
  boxSizing: 'content-box',
  display: 'inline-block',
  position: 'relative',
  cursor: 'pointer',
  touchAction: 'none',
  color: theme.palette[ownerState.color].main,
  WebkitTapHighlightColor: 'transparent'
}, ownerState.orientation === 'horizontal' && _extends["default"]({
  height: 4,
  width: '100%',
  padding: '13px 0',
  // The primary input mechanism of the device includes a pointing device of limited accuracy.
  '@media (pointer: coarse)': {
    // Reach 42px touch target, about ~8mm on screen.
    padding: '20px 0'
  }
}, ownerState.size === 'small' && {
  height: 2
}, ownerState.marked && {
  marginBottom: 20
}), ownerState.orientation === 'vertical' && _extends["default"]({
  height: '100%',
  width: 4,
  padding: '0 13px',
  // The primary input mechanism of the device includes a pointing device of limited accuracy.
  '@media (pointer: coarse)': {
    // Reach 42px touch target, about ~8mm on screen.
    padding: '0 20px'
  }
}, ownerState.size === 'small' && {
  width: 2
}, ownerState.marked && {
  marginRight: 44
}), {
  '@media print': {
    colorAdjust: 'exact'
  },
  [`&.${sliderClasses.disabled}`]: {
    pointerEvents: 'none',
    cursor: 'default',
    color: theme.palette.grey[400]
  },
  [`&.${sliderClasses.dragging}`]: {
    [`& .${sliderClasses.thumb}, & .${sliderClasses.track}`]: {
      transition: 'none'
    }
  }
}));
process.env.NODE_ENV !== "production" ? SliderRoot.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node
} : void 0;
const SliderRail = styled["default"]('span', {
  name: 'MuiSlider',
  slot: 'Rail',
  overridesResolver: (props, styles) => styles.rail
})(({
  ownerState
}) => _extends["default"]({
  display: 'block',
  position: 'absolute',
  borderRadius: 'inherit',
  backgroundColor: 'currentColor',
  opacity: 0.38
}, ownerState.orientation === 'horizontal' && {
  width: '100%',
  height: 'inherit',
  top: '50%',
  transform: 'translateY(-50%)'
}, ownerState.orientation === 'vertical' && {
  height: '100%',
  width: 'inherit',
  left: '50%',
  transform: 'translateX(-50%)'
}, ownerState.track === 'inverted' && {
  opacity: 1
}));
process.env.NODE_ENV !== "production" ? SliderRail.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node
} : void 0;
const SliderTrack = styled["default"]('span', {
  name: 'MuiSlider',
  slot: 'Track',
  overridesResolver: (props, styles) => styles.track
})(({
  theme,
  ownerState
}) => {
  const color = // Same logic as the LinearProgress track color
  theme.palette.mode === 'light' ? colorManipulator.lighten(theme.palette[ownerState.color].main, 0.62) : colorManipulator.darken(theme.palette[ownerState.color].main, 0.5);
  return _extends["default"]({
    display: 'block',
    position: 'absolute',
    borderRadius: 'inherit',
    border: '1px solid currentColor',
    backgroundColor: 'currentColor',
    transition: theme.transitions.create(['left', 'width', 'bottom', 'height'], {
      duration: theme.transitions.duration.shortest
    })
  }, ownerState.size === 'small' && {
    border: 'none'
  }, ownerState.orientation === 'horizontal' && {
    height: 'inherit',
    top: '50%',
    transform: 'translateY(-50%)'
  }, ownerState.orientation === 'vertical' && {
    width: 'inherit',
    left: '50%',
    transform: 'translateX(-50%)'
  }, ownerState.track === false && {
    display: 'none'
  }, ownerState.track === 'inverted' && {
    backgroundColor: color,
    borderColor: color
  });
});
process.env.NODE_ENV !== "production" ? SliderTrack.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node
} : void 0;
const SliderThumb = styled["default"]('span', {
  name: 'MuiSlider',
  slot: 'Thumb',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.thumb, styles[`thumbColor${capitalize["default"](ownerState.color)}`], ownerState.size !== 'medium' && styles[`thumbSize${capitalize["default"](ownerState.size)}`]];
  }
})(({
  theme,
  ownerState
}) => _extends["default"]({
  position: 'absolute',
  width: 20,
  height: 20,
  boxSizing: 'border-box',
  borderRadius: '50%',
  outline: 0,
  backgroundColor: 'currentColor',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  transition: theme.transitions.create(['box-shadow', 'left', 'bottom'], {
    duration: theme.transitions.duration.shortest
  })
}, ownerState.size === 'small' && {
  width: 12,
  height: 12
}, ownerState.orientation === 'horizontal' && {
  top: '50%',
  transform: 'translate(-50%, -50%)'
}, ownerState.orientation === 'vertical' && {
  left: '50%',
  transform: 'translate(-50%, 50%)'
}, {
  '&:before': _extends["default"]({
    position: 'absolute',
    content: '""',
    borderRadius: 'inherit',
    width: '100%',
    height: '100%',
    boxShadow: theme.shadows[2]
  }, ownerState.size === 'small' && {
    boxShadow: 'none'
  }),
  '&::after': {
    position: 'absolute',
    content: '""',
    borderRadius: '50%',
    // 42px is the hit target
    width: 42,
    height: 42,
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  [`&:hover, &.${sliderClasses.focusVisible}`]: {
    boxShadow: `0px 0px 0px 8px ${colorManipulator.alpha(theme.palette[ownerState.color].main, 0.16)}`,
    '@media (hover: none)': {
      boxShadow: 'none'
    }
  },
  [`&.${sliderClasses.active}`]: {
    boxShadow: `0px 0px 0px 14px ${colorManipulator.alpha(theme.palette[ownerState.color].main, 0.16)}`
  },
  [`&.${sliderClasses.disabled}`]: {
    '&:hover': {
      boxShadow: 'none'
    }
  }
}));
process.env.NODE_ENV !== "production" ? SliderThumb.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node
} : void 0;
const SliderValueLabel = styled["default"](SliderValueLabelUnstyled["default"], {
  name: 'MuiSlider',
  slot: 'ValueLabel',
  overridesResolver: (props, styles) => styles.valueLabel
})(({
  theme,
  ownerState
}) => _extends["default"]({
  [`&.${sliderClasses.valueLabelOpen}`]: {
    transform: 'translateY(-100%) scale(1)'
  },
  zIndex: 1,
  whiteSpace: 'nowrap'
}, theme.typography.body2, {
  fontWeight: 500,
  transition: theme.transitions.create(['transform'], {
    duration: theme.transitions.duration.shortest
  }),
  top: -10,
  transformOrigin: 'bottom center',
  transform: 'translateY(-100%) scale(0)',
  position: 'absolute',
  backgroundColor: theme.palette.grey[600],
  borderRadius: 2,
  color: theme.palette.common.white,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  padding: '0.25rem 0.75rem'
}, ownerState.size === 'small' && {
  fontSize: theme.typography.pxToRem(12),
  padding: '0.25rem 0.5rem'
}, {
  '&:before': {
    position: 'absolute',
    content: '""',
    width: 8,
    height: 8,
    bottom: 0,
    left: '50%',
    transform: 'translate(-50%, 50%) rotate(45deg)',
    backgroundColor: 'inherit'
  }
}));
process.env.NODE_ENV !== "production" ? SliderValueLabel.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node
} : void 0;
const SliderMark = styled["default"]('span', {
  name: 'MuiSlider',
  slot: 'Mark',
  shouldForwardProp: prop => styled.slotShouldForwardProp(prop) && prop !== 'markActive',
  overridesResolver: (props, styles) => styles.mark
})(({
  theme,
  ownerState,
  markActive
}) => _extends["default"]({
  position: 'absolute',
  width: 2,
  height: 2,
  borderRadius: 1,
  backgroundColor: 'currentColor'
}, ownerState.orientation === 'horizontal' && {
  top: '50%',
  transform: 'translate(-1px, -50%)'
}, ownerState.orientation === 'vertical' && {
  left: '50%',
  transform: 'translate(-50%, 1px)'
}, markActive && {
  backgroundColor: theme.palette.background.paper,
  opacity: 0.8
}));
process.env.NODE_ENV !== "production" ? SliderMark.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node
} : void 0;
const SliderMarkLabel = styled["default"]('span', {
  name: 'MuiSlider',
  slot: 'MarkLabel',
  shouldForwardProp: prop => styled.slotShouldForwardProp(prop) && prop !== 'markLabelActive',
  overridesResolver: (props, styles) => styles.markLabel
})(({
  theme,
  ownerState,
  markLabelActive
}) => _extends["default"]({}, theme.typography.body2, {
  color: theme.palette.text.secondary,
  position: 'absolute',
  whiteSpace: 'nowrap'
}, ownerState.orientation === 'horizontal' && {
  top: 30,
  transform: 'translateX(-50%)',
  '@media (pointer: coarse)': {
    top: 40
  }
}, ownerState.orientation === 'vertical' && {
  left: 36,
  transform: 'translateY(50%)',
  '@media (pointer: coarse)': {
    left: 44
  }
}, markLabelActive && {
  color: theme.palette.text.primary
}));
process.env.NODE_ENV !== "production" ? SliderMarkLabel.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node
} : void 0;

const extendUtilityClasses = ownerState => {
  const {
    color,
    size,
    classes = {}
  } = ownerState;
  return _extends["default"]({}, classes, {
    root: clsx_m["default"](classes.root, sliderUnstyledClasses.getSliderUtilityClass(`color${capitalize["default"](color)}`), classes[`color${capitalize["default"](color)}`], size && [sliderUnstyledClasses.getSliderUtilityClass(`size${capitalize["default"](size)}`), classes[`size${capitalize["default"](size)}`]]),
    thumb: clsx_m["default"](classes.thumb, sliderUnstyledClasses.getSliderUtilityClass(`thumbColor${capitalize["default"](color)}`), classes[`thumbColor${capitalize["default"](color)}`], size && [sliderUnstyledClasses.getSliderUtilityClass(`thumbSize${capitalize["default"](size)}`), classes[`thumbSize${capitalize["default"](size)}`]])
  });
};

const Slider = /*#__PURE__*/React__namespace.forwardRef(function Slider(inputProps, ref) {
  var _componentsProps$root, _componentsProps$thum, _componentsProps$trac, _componentsProps$valu;

  const props = useThemeProps["default"]({
    props: inputProps,
    name: 'MuiSlider'
  });
  const theme = useTheme["default"]();
  const isRtl = theme.direction === 'rtl';

  const {
    // eslint-disable-next-line react/prop-types
    component = 'span',
    components = {},
    componentsProps = {},
    color = 'primary',
    size = 'medium'
  } = props,
        other = objectWithoutPropertiesLoose["default"](props, _excluded);

  const ownerState = _extends["default"]({}, props, {
    color,
    size
  });

  const classes = extendUtilityClasses(ownerState);
  return /*#__PURE__*/jsxRuntime.jsx(SliderUnstyled["default"], _extends["default"]({}, other, {
    isRtl: isRtl,
    components: _extends["default"]({
      Root: SliderRoot,
      Rail: SliderRail,
      Track: SliderTrack,
      Thumb: SliderThumb,
      ValueLabel: SliderValueLabel,
      Mark: SliderMark,
      MarkLabel: SliderMarkLabel
    }, components),
    componentsProps: _extends["default"]({}, componentsProps, {
      root: _extends["default"]({}, componentsProps.root, shouldSpreadAdditionalProps["default"](components.Root) && {
        as: component,
        ownerState: _extends["default"]({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
          color,
          size
        })
      }),
      thumb: _extends["default"]({}, componentsProps.thumb, shouldSpreadAdditionalProps["default"](components.Thumb) && {
        ownerState: _extends["default"]({}, (_componentsProps$thum = componentsProps.thumb) == null ? void 0 : _componentsProps$thum.ownerState, {
          color,
          size
        })
      }),
      track: _extends["default"]({}, componentsProps.track, shouldSpreadAdditionalProps["default"](components.Track) && {
        ownerState: _extends["default"]({}, (_componentsProps$trac = componentsProps.track) == null ? void 0 : _componentsProps$trac.ownerState, {
          color,
          size
        })
      }),
      valueLabel: _extends["default"]({}, componentsProps.valueLabel, shouldSpreadAdditionalProps["default"](components.ValueLabel) && {
        ownerState: _extends["default"]({}, (_componentsProps$valu = componentsProps.valueLabel) == null ? void 0 : _componentsProps$valu.ownerState, {
          color,
          size
        })
      })
    }),
    classes: classes,
    ref: ref
  }));
});
process.env.NODE_ENV !== "production" ? Slider.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The label of the slider.
   */
  'aria-label': chainPropTypes["default"](PropTypes__default["default"].string, props => {
    const range = Array.isArray(props.value || props.defaultValue);

    if (range && props['aria-label'] != null) {
      return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
    }

    return null;
  }),

  /**
   * The id of the element containing a label for the slider.
   */
  'aria-labelledby': PropTypes__default["default"].string,

  /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */
  'aria-valuetext': chainPropTypes["default"](PropTypes__default["default"].string, props => {
    const range = Array.isArray(props.value || props.defaultValue);

    if (range && props['aria-valuetext'] != null) {
      return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
    }

    return null;
  }),

  /**
   * @ignore
   */
  children: PropTypes__default["default"].node,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes__default["default"].object,

  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
   * @default 'primary'
   */
  color: PropTypes__default["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes__default["default"].oneOf(['primary', 'secondary']), PropTypes__default["default"].string]),

  /**
   * The components used for each slot inside the Slider.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: PropTypes__default["default"].shape({
    Input: PropTypes__default["default"].elementType,
    Mark: PropTypes__default["default"].elementType,
    MarkLabel: PropTypes__default["default"].elementType,
    Rail: PropTypes__default["default"].elementType,
    Root: PropTypes__default["default"].elementType,
    Thumb: PropTypes__default["default"].elementType,
    Track: PropTypes__default["default"].elementType,
    ValueLabel: PropTypes__default["default"].elementType
  }),

  /**
   * The props used for each slot inside the Slider.
   * @default {}
   */
  componentsProps: PropTypes__default["default"].shape({
    input: PropTypes__default["default"].object,
    mark: PropTypes__default["default"].object,
    markLabel: PropTypes__default["default"].object,
    rail: PropTypes__default["default"].object,
    root: PropTypes__default["default"].object,
    thumb: PropTypes__default["default"].object,
    track: PropTypes__default["default"].object,
    valueLabel: PropTypes__default["default"].shape({
      className: PropTypes__default["default"].string,
      components: PropTypes__default["default"].shape({
        Root: PropTypes__default["default"].elementType
      }),
      style: PropTypes__default["default"].object,
      value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].number), PropTypes__default["default"].number]),
      valueLabelDisplay: PropTypes__default["default"].oneOf(['auto', 'off', 'on'])
    })
  }),

  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].number), PropTypes__default["default"].number]),

  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */
  disableSwap: PropTypes__default["default"].bool,

  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaLabel: PropTypes__default["default"].func,

  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaValueText: PropTypes__default["default"].func,

  /**
   * Indicates whether the theme context has rtl direction. It is set automatically.
   * @default false
   */
  isRtl: PropTypes__default["default"].bool,

  /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */
  marks: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].shape({
    label: PropTypes__default["default"].node,
    value: PropTypes__default["default"].number.isRequired
  })), PropTypes__default["default"].bool]),

  /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */
  max: PropTypes__default["default"].number,

  /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */
  min: PropTypes__default["default"].number,

  /**
   * Name attribute of the hidden `input` element.
   */
  name: PropTypes__default["default"].string,

  /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */
  onChangeCommitted: PropTypes__default["default"].func,

  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: PropTypes__default["default"].oneOf(['horizontal', 'vertical']),

  /**
   * A transformation function, to change the scale of the slider.
   * @default (x) => x
   */
  scale: PropTypes__default["default"].func,

  /**
   * The size of the slider.
   * @default 'medium'
   */
  size: PropTypes__default["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes__default["default"].oneOf(['small', 'medium']), PropTypes__default["default"].string]),

  /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */
  step: PropTypes__default["default"].number,

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object, PropTypes__default["default"].bool])), PropTypes__default["default"].func, PropTypes__default["default"].object]),

  /**
   * Tab index attribute of the hidden `input` element.
   */
  tabIndex: PropTypes__default["default"].number,

  /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */
  track: PropTypes__default["default"].oneOf(['inverted', 'normal', false]),

  /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */
  value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].number), PropTypes__default["default"].number]),

  /**
   * Controls when the value label is displayed:
   *
   * - `auto` the value label will display when the thumb is hovered or focused.
   * - `on` will display persistently.
   * - `off` will never display.
   * @default 'off'
   */
  valueLabelDisplay: PropTypes__default["default"].oneOf(['auto', 'off', 'on']),

  /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @default (x) => x
   */
  valueLabelFormat: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].string])
} : void 0;

exports.SliderMark = SliderMark;
exports.SliderMarkLabel = SliderMarkLabel;
exports.SliderRail = SliderRail;
exports.SliderRoot = SliderRoot;
exports.SliderThumb = SliderThumb;
exports.SliderTrack = SliderTrack;
exports.SliderValueLabel = SliderValueLabel;
exports["default"] = Slider;
exports.sliderClasses = sliderClasses;
//# sourceMappingURL=Slider.js.map
