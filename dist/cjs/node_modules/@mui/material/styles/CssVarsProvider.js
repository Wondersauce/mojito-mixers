'use strict';

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
require('@emotion/styled');
require('../../../@emotion/react/dist/emotion-react.esm.js');
require('../../styled-engine/StyledEngineProvider/StyledEngineProvider.js');
require('../../styled-engine/GlobalStyles/GlobalStyles.js');
require('../../system/esm/borders.js');
require('prop-types');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
require('react');
require('../../utils/esm/integerPropType.js');
require('../../system/esm/display.js');
require('../../system/esm/flexbox.js');
require('../../system/esm/grid.js');
require('../../system/esm/palette.js');
require('../../system/esm/positions.js');
require('../../system/esm/shadows.js');
require('../../system/esm/sizing.js');
require('../../system/esm/spacing.js');
require('../../system/esm/responsivePropType.js');
require('../../system/esm/typography.js');
require('../../system/esm/styleFunctionSx/styleFunctionSx.js');
require('../../system/esm/getThemeValue.js');
require('../../system/esm/Box/Box.js');
require('../../system/esm/useTheme.js');
require('react/jsx-runtime');
require('../../system/esm/createStyled.js');
require('../../private-theming/ThemeProvider/ThemeProvider.js');
require('../../private-theming/useTheme/ThemeContext.js');
require('../../system/esm/ThemeProvider/ThemeProvider.js');
var createCssVarsProvider = require('../../system/esm/cssVars/createCssVarsProvider.js');
require('../../system/esm/Container/createContainer.js');
require('../../system/esm/Container/Container.js');
require('../../system/esm/Container/containerClasses.js');
var experimental_extendTheme = require('./experimental_extendTheme.js');
var createTypography = require('./createTypography.js');

const defaultTheme = experimental_extendTheme["default"]();
createCssVarsProvider["default"]({
  theme: defaultTheme,
  defaultColorScheme: {
    light: 'light',
    dark: 'dark'
  },
  prefix: 'md',
  resolveTheme: theme => {
    const newTheme = _extends["default"]({}, theme, {
      typography: createTypography["default"](theme.palette, theme.typography)
    });

    return newTheme;
  },
  shouldSkipGeneratingVar: keys => !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/)
});
//# sourceMappingURL=CssVarsProvider.js.map
