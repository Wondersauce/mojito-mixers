'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectWithoutPropertiesLoose = require('@babel/runtime/helpers/esm/objectWithoutPropertiesLoose');
var _extends = require('@babel/runtime/helpers/esm/extends');
var React = require('react');
require('../../../react-is/index.js');
var index$1 = require('../../../prop-types/index.js');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
var styled = require('../styles/styled.js');
var useThemeProps = require('../styles/useThemeProps.js');
var isValueSelected = require('./isValueSelected.js');
var toggleButtonGroupClasses = require('./toggleButtonGroupClasses.js');
var require$$2 = require('react/jsx-runtime');
var composeClasses = require('../../base/composeClasses/composeClasses.js');
var index = require('../../../../_virtual/index.js_commonjs-module.js');
var capitalize = require('../../utils/esm/capitalize.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutPropertiesLoose);
var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var React__namespace = /*#__PURE__*/_interopNamespace(React);

const _excluded = ["children", "className", "color", "disabled", "exclusive", "fullWidth", "onChange", "orientation", "size", "value"];

const useUtilityClasses = ownerState => {
  const {
    classes,
    orientation,
    fullWidth,
    disabled
  } = ownerState;
  const slots = {
    root: ['root', orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth'],
    grouped: ['grouped', `grouped${capitalize["default"](orientation)}`, disabled && 'disabled']
  };
  return composeClasses["default"](slots, toggleButtonGroupClasses.getToggleButtonGroupUtilityClass, classes);
};

const ToggleButtonGroupRoot = styled["default"]('div', {
  name: 'MuiToggleButtonGroup',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${toggleButtonGroupClasses["default"].grouped}`]: styles.grouped
    }, {
      [`& .${toggleButtonGroupClasses["default"].grouped}`]: styles[`grouped${capitalize["default"](ownerState.orientation)}`]
    }, styles.root, ownerState.orientation === 'vertical' && styles.vertical, ownerState.fullWidth && styles.fullWidth];
  }
})(({
  ownerState,
  theme
}) => _extends__default["default"]({
  display: 'inline-flex',
  borderRadius: theme.shape.borderRadius
}, ownerState.orientation === 'vertical' && {
  flexDirection: 'column'
}, ownerState.fullWidth && {
  width: '100%'
}, {
  [`& .${toggleButtonGroupClasses["default"].grouped}`]: _extends__default["default"]({}, ownerState.orientation === 'horizontal' ? {
    '&:not(:first-of-type)': {
      marginLeft: -1,
      borderLeft: '1px solid transparent',
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    },
    '&:not(:last-of-type)': {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    },
    [`&.${toggleButtonGroupClasses["default"].selected} + .${toggleButtonGroupClasses["default"].grouped}.${toggleButtonGroupClasses["default"].selected}`]: {
      borderLeft: 0,
      marginLeft: 0
    }
  } : {
    '&:not(:first-of-type)': {
      marginTop: -1,
      borderTop: '1px solid transparent',
      borderTopLeftRadius: 0,
      borderTopRightRadius: 0
    },
    '&:not(:last-of-type)': {
      borderBottomLeftRadius: 0,
      borderBottomRightRadius: 0
    },
    [`&.${toggleButtonGroupClasses["default"].selected} + .${toggleButtonGroupClasses["default"].grouped}.${toggleButtonGroupClasses["default"].selected}`]: {
      borderTop: 0,
      marginTop: 0
    }
  })
}));
const ToggleButtonGroup = /*#__PURE__*/React__namespace.forwardRef(function ToggleButtonGroup(inProps, ref) {
  const props = useThemeProps["default"]({
    props: inProps,
    name: 'MuiToggleButtonGroup'
  });

  const {
    children,
    className,
    color = 'standard',
    disabled = false,
    exclusive = false,
    fullWidth = false,
    onChange,
    orientation = 'horizontal',
    size = 'medium',
    value
  } = props,
        other = _objectWithoutPropertiesLoose__default["default"](props, _excluded);

  const ownerState = _extends__default["default"]({}, props, {
    disabled,
    fullWidth,
    orientation,
    size
  });

  const classes = useUtilityClasses(ownerState);

  const handleChange = (event, buttonValue) => {
    if (!onChange) {
      return;
    }

    const index = value && value.indexOf(buttonValue);
    let newValue;

    if (value && index >= 0) {
      newValue = value.slice();
      newValue.splice(index, 1);
    } else {
      newValue = value ? value.concat(buttonValue) : [buttonValue];
    }

    onChange(event, newValue);
  };

  const handleExclusiveChange = (event, buttonValue) => {
    if (!onChange) {
      return;
    }

    onChange(event, value === buttonValue ? null : buttonValue);
  };

  return /*#__PURE__*/require$$2.jsx(ToggleButtonGroupRoot, _extends__default["default"]({
    role: "group",
    className: clsx_m["default"](classes.root, className),
    ref: ref,
    ownerState: ownerState
  }, other, {
    children: React__namespace.Children.map(children, child => {
      if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
        return null;
      }

      if (process.env.NODE_ENV !== 'production') {
        if (index.reactIs.exports.isFragment(child)) {
          console.error(["MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        }
      }

      return /*#__PURE__*/React__namespace.cloneElement(child, {
        className: clsx_m["default"](classes.grouped, child.props.className),
        onChange: exclusive ? handleExclusiveChange : handleChange,
        selected: child.props.selected === undefined ? isValueSelected["default"](child.props.value, value) : child.props.selected,
        size: child.props.size || size,
        fullWidth,
        color: child.props.color || color,
        disabled: child.props.disabled || disabled
      });
    })
  }));
});
process.env.NODE_ENV !== "production" ? ToggleButtonGroup.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The content of the component.
   */
  children: index$1["default"].node,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: index$1["default"].object,

  /**
   * @ignore
   */
  className: index$1["default"].string,

  /**
   * The color of a button when it is selected.
   * @default 'standard'
   */
  color: index$1["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([index$1["default"].oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), index$1["default"].string]),

  /**
   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.
   * @default false
   */
  disabled: index$1["default"].bool,

  /**
   * If `true`, only allow one of the child ToggleButton values to be selected.
   * @default false
   */
  exclusive: index$1["default"].bool,

  /**
   * If `true`, the button group will take up the full width of its container.
   * @default false
   */
  fullWidth: index$1["default"].bool,

  /**
   * Callback fired when the value changes.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected buttons. When `exclusive` is true
   * this is a single value; when false an array of selected values. If no value
   * is selected and `exclusive` is true the value is null; when false an empty array.
   */
  onChange: index$1["default"].func,

  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: index$1["default"].oneOf(['horizontal', 'vertical']),

  /**
   * The size of the component.
   * @default 'medium'
   */
  size: index$1["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([index$1["default"].oneOf(['small', 'medium', 'large']), index$1["default"].string]),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: index$1["default"].oneOfType([index$1["default"].arrayOf(index$1["default"].oneOfType([index$1["default"].func, index$1["default"].object, index$1["default"].bool])), index$1["default"].func, index$1["default"].object]),

  /**
   * The currently selected value within the group or an array of selected
   * values when `exclusive` is false.
   *
   * The value must have reference equality with the option in order to be selected.
   */
  value: index$1["default"].any
} : void 0;
var ToggleButtonGroup$1 = ToggleButtonGroup;

exports["default"] = ToggleButtonGroup$1;
//# sourceMappingURL=ToggleButtonGroup.js.map
