'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var React = require('react');
var index = require('../../../prop-types/index.js');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
var useThemeProps = require('../styles/useThemeProps.js');
var styled = require('../styles/styled.js');
var toggleButtonClasses = require('./toggleButtonClasses.js');
var require$$2 = require('react/jsx-runtime');
var ButtonBase = require('../ButtonBase/ButtonBase.js');
var composeClasses = require('../../base/composeClasses/composeClasses.js');
var capitalize = require('../../utils/esm/capitalize.js');
var system = require('@mui/system');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

const _excluded = ["children", "className", "color", "disabled", "disableFocusRipple", "fullWidth", "onChange", "onClick", "selected", "size", "value"];

const useUtilityClasses = ownerState => {
  const {
    classes,
    fullWidth,
    selected,
    disabled,
    size,
    color
  } = ownerState;
  const slots = {
    root: ['root', selected && 'selected', disabled && 'disabled', fullWidth && 'fullWidth', `size${capitalize["default"](size)}`, color]
  };
  return composeClasses["default"](slots, toggleButtonClasses.getToggleButtonUtilityClass, classes);
};

const ToggleButtonRoot = styled["default"](ButtonBase["default"], {
  name: 'MuiToggleButton',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[`size${capitalize["default"](ownerState.size)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  const selectedColor = ownerState.color === 'standard' ? theme.palette.text.primary : theme.palette[ownerState.color].main;
  return _extends["default"]({}, theme.typography.button, {
    borderRadius: theme.shape.borderRadius,
    padding: 11,
    border: `1px solid ${theme.palette.divider}`,
    color: theme.palette.action.active
  }, ownerState.fullWidth && {
    width: '100%'
  }, {
    [`&.${toggleButtonClasses["default"].disabled}`]: {
      color: theme.palette.action.disabled,
      border: `1px solid ${theme.palette.action.disabledBackground}`
    },
    '&:hover': {
      textDecoration: 'none',
      // Reset on mouse devices
      backgroundColor: system.alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    },
    [`&.${toggleButtonClasses["default"].selected}`]: {
      color: selectedColor,
      backgroundColor: system.alpha(selectedColor, theme.palette.action.selectedOpacity),
      '&:hover': {
        backgroundColor: system.alpha(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: system.alpha(selectedColor, theme.palette.action.selectedOpacity)
        }
      }
    }
  }, ownerState.size === 'small' && {
    padding: 7,
    fontSize: theme.typography.pxToRem(13)
  }, ownerState.size === 'large' && {
    padding: 15,
    fontSize: theme.typography.pxToRem(15)
  });
});
const ToggleButton = /*#__PURE__*/React__namespace.forwardRef(function ToggleButton(inProps, ref) {
  const props = useThemeProps["default"]({
    props: inProps,
    name: 'MuiToggleButton'
  });

  const {
    children,
    className,
    color = 'standard',
    disabled = false,
    disableFocusRipple = false,
    fullWidth = false,
    onChange,
    onClick,
    selected,
    size = 'medium',
    value
  } = props,
        other = objectWithoutPropertiesLoose["default"](props, _excluded);

  const ownerState = _extends["default"]({}, props, {
    color,
    disabled,
    disableFocusRipple,
    fullWidth,
    size
  });

  const classes = useUtilityClasses(ownerState);

  const handleChange = event => {
    if (onClick) {
      onClick(event, value);

      if (event.defaultPrevented) {
        return;
      }
    }

    if (onChange) {
      onChange(event, value);
    }
  };

  return /*#__PURE__*/require$$2.jsx(ToggleButtonRoot, _extends["default"]({
    className: clsx_m["default"](classes.root, className),
    disabled: disabled,
    focusRipple: !disableFocusRipple,
    ref: ref,
    onClick: handleChange,
    onChange: onChange,
    value: value,
    ownerState: ownerState,
    "aria-pressed": selected
  }, other, {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? ToggleButton.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The content of the component.
   */
  children: index["default"].node,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: index["default"].object,

  /**
   * @ignore
   */
  className: index["default"].string,

  /**
   * The color of the button when it is in an active state.
   * @default 'standard'
   */
  color: index["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([index["default"].oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), index["default"].string]),

  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: index["default"].bool,

  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: index["default"].bool,

  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: index["default"].bool,

  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: index["default"].bool,

  /**
   * Callback fired when the state changes.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected button.
   */
  onChange: index["default"].func,

  /**
   * Callback fired when the button is clicked.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected button.
   */
  onClick: index["default"].func,

  /**
   * If `true`, the button is rendered in an active state.
   */
  selected: index["default"].bool,

  /**
   * The size of the component.
   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.
   * @default 'medium'
   */
  size: index["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([index["default"].oneOf(['small', 'medium', 'large']), index["default"].string]),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: index["default"].oneOfType([index["default"].arrayOf(index["default"].oneOfType([index["default"].func, index["default"].object, index["default"].bool])), index["default"].func, index["default"].object]),

  /**
   * The value to associate with the button when selected in a
   * ToggleButtonGroup.
   */
  value: index["default"].any.isRequired
} : void 0;
var ToggleButton$1 = ToggleButton;

exports["default"] = ToggleButton$1;
//# sourceMappingURL=ToggleButton.js.map
