'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var React = require('react');
var index = require('../../../prop-types/index.js');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
var styled = require('../styles/styled.js');
var useThemeProps = require('../styles/useThemeProps.js');
var formControlLabelClasses = require('./formControlLabelClasses.js');
var formControlState = require('../FormControl/formControlState.js');
var require$$2 = require('react/jsx-runtime');
var useFormControl = require('../FormControl/useFormControl.js');
var composeClasses = require('../../base/composeClasses/composeClasses.js');
var Typography = require('../Typography/Typography.js');
var refType = require('../../utils/esm/refType.js');
var capitalize = require('../../utils/esm/capitalize.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

const _excluded = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "value"];

const useUtilityClasses = ownerState => {
  const {
    classes,
    disabled,
    labelPlacement,
    error
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', `labelPlacement${capitalize["default"](labelPlacement)}`, error && 'error'],
    label: ['label', disabled && 'disabled']
  };
  return composeClasses["default"](slots, formControlLabelClasses.getFormControlLabelUtilityClasses, classes);
};

const FormControlLabelRoot = styled["default"]('label', {
  name: 'MuiFormControlLabel',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${formControlLabelClasses["default"].label}`]: styles.label
    }, styles.root, styles[`labelPlacement${capitalize["default"](ownerState.labelPlacement)}`]];
  }
})(({
  theme,
  ownerState
}) => _extends["default"]({
  display: 'inline-flex',
  alignItems: 'center',
  cursor: 'pointer',
  // For correct alignment with the text.
  verticalAlign: 'middle',
  WebkitTapHighlightColor: 'transparent',
  marginLeft: -11,
  marginRight: 16,
  // used for row presentation of radio/checkbox
  [`&.${formControlLabelClasses["default"].disabled}`]: {
    cursor: 'default'
  }
}, ownerState.labelPlacement === 'start' && {
  flexDirection: 'row-reverse',
  marginLeft: 16,
  // used for row presentation of radio/checkbox
  marginRight: -11
}, ownerState.labelPlacement === 'top' && {
  flexDirection: 'column-reverse',
  marginLeft: 16
}, ownerState.labelPlacement === 'bottom' && {
  flexDirection: 'column',
  marginLeft: 16
}, {
  [`& .${formControlLabelClasses["default"].label}`]: {
    [`&.${formControlLabelClasses["default"].disabled}`]: {
      color: theme.palette.text.disabled
    }
  }
}));
/**
 * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.
 * Use this component if you want to display an extra label.
 */

const FormControlLabel = /*#__PURE__*/React__namespace.forwardRef(function FormControlLabel(inProps, ref) {
  const props = useThemeProps["default"]({
    props: inProps,
    name: 'MuiFormControlLabel'
  });

  const {
    className,
    componentsProps = {},
    control,
    disabled: disabledProp,
    disableTypography,
    label,
    labelPlacement = 'end'
  } = props,
        other = objectWithoutPropertiesLoose["default"](props, _excluded);

  const muiFormControl = useFormControl["default"]();
  let disabled = disabledProp;

  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
    disabled = control.props.disabled;
  }

  if (typeof disabled === 'undefined' && muiFormControl) {
    disabled = muiFormControl.disabled;
  }

  const controlProps = {
    disabled
  };
  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {
    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
      controlProps[key] = props[key];
    }
  });
  const fcs = formControlState["default"]({
    props,
    muiFormControl,
    states: ['error']
  });

  const ownerState = _extends["default"]({}, props, {
    disabled,
    label,
    labelPlacement,
    error: fcs.error
  });

  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/require$$2.jsxs(FormControlLabelRoot, _extends["default"]({
    className: clsx_m["default"](classes.root, className),
    ownerState: ownerState,
    ref: ref
  }, other, {
    children: [/*#__PURE__*/React__namespace.cloneElement(control, controlProps), label.type === Typography["default"] || disableTypography ? label : /*#__PURE__*/require$$2.jsx(Typography["default"], _extends["default"]({
      component: "span",
      className: classes.label
    }, componentsProps.typography, {
      children: label
    }))]
  }));
});
process.env.NODE_ENV !== "production" ? FormControlLabel.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * If `true`, the component appears selected.
   */
  checked: index["default"].bool,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: index["default"].object,

  /**
   * @ignore
   */
  className: index["default"].string,

  /**
   * The props used for each slot inside.
   * @default {}
   */
  componentsProps: index["default"].shape({
    typography: index["default"].object
  }),

  /**
   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
   */
  control: index["default"].element.isRequired,

  /**
   * If `true`, the control is disabled.
   */
  disabled: index["default"].bool,

  /**
   * If `true`, the label is rendered as it is passed without an additional typography node.
   */
  disableTypography: index["default"].bool,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType["default"],

  /**
   * A text or an element to be used in an enclosing label element.
   */
  label: index["default"].oneOfType([index["default"].element, index["default"].number, index["default"].string]).isRequired,

  /**
   * The position of the label.
   * @default 'end'
   */
  labelPlacement: index["default"].oneOf(['bottom', 'end', 'start', 'top']),

  /**
   * @ignore
   */
  name: index["default"].string,

  /**
   * Callback fired when the state is changed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: index["default"].func,

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: index["default"].oneOfType([index["default"].arrayOf(index["default"].oneOfType([index["default"].func, index["default"].object, index["default"].bool])), index["default"].func, index["default"].object]),

  /**
   * The value of the component.
   */
  value: index["default"].any
} : void 0;
var FormControlLabel$1 = FormControlLabel;

exports.FormControlLabelRoot = FormControlLabelRoot;
exports["default"] = FormControlLabel$1;
//# sourceMappingURL=FormControlLabel.js.map
