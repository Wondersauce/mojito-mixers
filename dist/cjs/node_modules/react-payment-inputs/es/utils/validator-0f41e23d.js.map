{"version":3,"file":"validator-0f41e23d.js","sources":["../../../../../../node_modules/react-payment-inputs/es/utils/validator-0f41e23d.js"],"sourcesContent":["import { a as getCardTypeByValue } from './cardTypes-4f45f8d3.js';\n\nvar MONTH_REGEX = /(0[1-9]|1[0-2])/;\nvar EMPTY_CARD_NUMBER = 'Enter a card number';\nvar EMPTY_EXPIRY_DATE = 'Enter an expiry date';\nvar EMPTY_CVC = 'Enter a CVC';\nvar EMPTY_ZIP = 'Enter a ZIP code';\nvar INVALID_CARD_NUMBER = 'Card number is invalid';\nvar INVALID_EXPIRY_DATE = 'Expiry date is invalid';\nvar INVALID_CVC = 'CVC is invalid';\nvar MONTH_OUT_OF_RANGE = 'Expiry month must be between 01 and 12';\nvar YEAR_OUT_OF_RANGE = 'Expiry year cannot be in the past';\nvar DATE_OUT_OF_RANGE = 'Expiry date cannot be in the past';\nvar hasCardNumberReachedMaxLength = function hasCardNumberReachedMaxLength(currentValue) {\n  var cardType = getCardTypeByValue(currentValue);\n  return cardType && currentValue.length >= cardType.lengths[cardType.lengths.length - 1];\n};\nvar isNumeric = function isNumeric(e) {\n  return /^\\d*$/.test(e.key);\n};\nvar validateLuhn = function validateLuhn(cardNumber) {\n  return cardNumber.split('').reverse().map(function (digit) {\n    return parseInt(digit, 10);\n  }).map(function (digit, idx) {\n    return idx % 2 ? digit * 2 : digit;\n  }).map(function (digit) {\n    return digit > 9 ? digit % 10 + 1 : digit;\n  }).reduce(function (accum, digit) {\n    return accum += digit;\n  }) % 10 === 0;\n};\nvar getCardNumberError = function getCardNumberError(cardNumber, cardNumberValidator) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$errorMessages = _ref.errorMessages,\n      errorMessages = _ref$errorMessages === void 0 ? {} : _ref$errorMessages;\n\n  if (!cardNumber) {\n    return errorMessages.emptyCardNumber || EMPTY_CARD_NUMBER;\n  }\n\n  var rawCardNumber = cardNumber.replace(/\\s/g, '');\n  var cardType = getCardTypeByValue(rawCardNumber);\n\n  if (cardType && cardType.lengths) {\n    var doesCardNumberMatchLength = cardType.lengths.includes(rawCardNumber.length);\n\n    if (doesCardNumberMatchLength) {\n      var isLuhnValid = validateLuhn(rawCardNumber);\n\n      if (isLuhnValid) {\n        if (cardNumberValidator) {\n          return cardNumberValidator({\n            cardNumber: rawCardNumber,\n            cardType: cardType,\n            errorMessages: errorMessages\n          });\n        }\n\n        return;\n      }\n    }\n  }\n\n  return errorMessages.invalidCardNumber || INVALID_CARD_NUMBER;\n};\nvar getExpiryDateError = function getExpiryDateError(expiryDate, expiryValidator) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$errorMessages = _ref2.errorMessages,\n      errorMessages = _ref2$errorMessages === void 0 ? {} : _ref2$errorMessages;\n\n  if (!expiryDate) {\n    return errorMessages.emptyExpiryDate || EMPTY_EXPIRY_DATE;\n  }\n\n  var rawExpiryDate = expiryDate.replace(' / ', '').replace('/', '');\n\n  if (rawExpiryDate.length === 4) {\n    var month = rawExpiryDate.slice(0, 2);\n    var year = \"20\".concat(rawExpiryDate.slice(2, 4));\n\n    if (!MONTH_REGEX.test(month)) {\n      return errorMessages.monthOutOfRange || MONTH_OUT_OF_RANGE;\n    }\n\n    if (parseInt(year) < new Date().getFullYear()) {\n      return errorMessages.yearOutOfRange || YEAR_OUT_OF_RANGE;\n    }\n\n    if (parseInt(year) === new Date().getFullYear() && parseInt(month) < new Date().getMonth() + 1) {\n      return errorMessages.dateOutOfRange || DATE_OUT_OF_RANGE;\n    }\n\n    if (expiryValidator) {\n      return expiryValidator({\n        expiryDate: {\n          month: month,\n          year: year\n        },\n        errorMessages: errorMessages\n      });\n    }\n\n    return;\n  }\n\n  return errorMessages.invalidExpiryDate || INVALID_EXPIRY_DATE;\n};\nvar getCVCError = function getCVCError(cvc, cvcValidator) {\n  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      cardType = _ref3.cardType,\n      _ref3$errorMessages = _ref3.errorMessages,\n      errorMessages = _ref3$errorMessages === void 0 ? {} : _ref3$errorMessages;\n\n  if (!cvc) {\n    return errorMessages.emptyCVC || EMPTY_CVC;\n  }\n\n  if (cvc.length < 3) {\n    return errorMessages.invalidCVC || INVALID_CVC;\n  }\n\n  if (cardType && cvc.length !== cardType.code.length) {\n    return errorMessages.invalidCVC || INVALID_CVC;\n  }\n\n  if (cvcValidator) {\n    return cvcValidator({\n      cvc: cvc,\n      cardType: cardType,\n      errorMessages: errorMessages\n    });\n  }\n\n  return;\n};\nvar getZIPError = function getZIPError(zip) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$errorMessages = _ref4.errorMessages,\n      errorMessages = _ref4$errorMessages === void 0 ? {} : _ref4$errorMessages;\n\n  if (!zip) {\n    return errorMessages.emptyZIP || EMPTY_ZIP;\n  }\n\n  return;\n};\n\nvar validator = /*#__PURE__*/Object.freeze({\n  EMPTY_CARD_NUMBER: EMPTY_CARD_NUMBER,\n  EMPTY_EXPIRY_DATE: EMPTY_EXPIRY_DATE,\n  EMPTY_CVC: EMPTY_CVC,\n  EMPTY_ZIP: EMPTY_ZIP,\n  INVALID_CARD_NUMBER: INVALID_CARD_NUMBER,\n  INVALID_EXPIRY_DATE: INVALID_EXPIRY_DATE,\n  INVALID_CVC: INVALID_CVC,\n  MONTH_OUT_OF_RANGE: MONTH_OUT_OF_RANGE,\n  YEAR_OUT_OF_RANGE: YEAR_OUT_OF_RANGE,\n  DATE_OUT_OF_RANGE: DATE_OUT_OF_RANGE,\n  hasCardNumberReachedMaxLength: hasCardNumberReachedMaxLength,\n  isNumeric: isNumeric,\n  validateLuhn: validateLuhn,\n  getCardNumberError: getCardNumberError,\n  getExpiryDateError: getExpiryDateError,\n  getCVCError: getCVCError,\n  getZIPError: getZIPError\n});\n\nexport { validator as a, EMPTY_CARD_NUMBER as b, EMPTY_EXPIRY_DATE as c, EMPTY_CVC as d, EMPTY_ZIP as e, INVALID_CARD_NUMBER as f, INVALID_EXPIRY_DATE as g, INVALID_CVC as h, MONTH_OUT_OF_RANGE as i, YEAR_OUT_OF_RANGE as j, DATE_OUT_OF_RANGE as k, hasCardNumberReachedMaxLength as l, isNumeric as m, validateLuhn as n, getCardNumberError as o, getExpiryDateError as p, getCVCError as q, getZIPError as r };\n"],"names":["getCardTypeByValue"],"mappings":"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"}