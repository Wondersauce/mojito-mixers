{"version":3,"file":"collectFields.mjs.js","sources":["../../../../../node_modules/graphql/execution/collectFields.mjs"],"sourcesContent":["import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n} from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = getDirectiveValues(\n    GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n"],"names":["Kind","getDirectiveValues","GraphQLSkipDirective","GraphQLIncludeDirective","typeFromAST","isAbstractType"],"mappings":"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"}