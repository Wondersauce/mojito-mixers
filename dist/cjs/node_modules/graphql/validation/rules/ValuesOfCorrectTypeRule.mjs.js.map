{"version":3,"file":"ValuesOfCorrectTypeRule.mjs.js","sources":["../../../../../../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"],"sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n"],"names":["getNullableType","isListType","getNamedType","isInputObjectType","keyMap","isRequiredInputField","inspect","GraphQLError","suggestionList","didYouMean","isNonNullType","print","isLeafType"],"mappings":"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"}