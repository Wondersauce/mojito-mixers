{"version":3,"file":"VariablesInAllowedPositionRule.mjs.js","sources":["../../../../../../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n"],"names":["typeFromAST","inspect","GraphQLError","isNonNullType","Kind","isTypeSubTypeOf"],"mappings":"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"}