'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var didYouMean = require('../../jsutils/didYouMean.mjs.js');
var inspect = require('../../jsutils/inspect.mjs.js');
var keyMap = require('../../jsutils/keyMap.mjs.js');
var suggestionList = require('../../jsutils/suggestionList.mjs.js');
var GraphQLError = require('../../error/GraphQLError.mjs.js');
var printer = require('../../language/printer.mjs.js');
var definition = require('../../type/definition.mjs.js');

/**
 * Value literals of correct type
 *
 * A GraphQL document is only valid if all value literals are of the type
 * expected at their position.
 *
 * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type
 */
function ValuesOfCorrectTypeRule(context) {
  return {
    ListValue(node) {
      // Note: TypeInfo will traverse into a list's item type, so look to the
      // parent input type to check if it is a list.
      const type = definition.getNullableType(context.getParentInputType());

      if (!definition.isListType(type)) {
        isValidValueNode(context, node);
        return false; // Don't traverse further.
      }
    },

    ObjectValue(node) {
      const type = definition.getNamedType(context.getInputType());

      if (!definition.isInputObjectType(type)) {
        isValidValueNode(context, node);
        return false; // Don't traverse further.
      } // Ensure every required field exists.

      const fieldNodeMap = keyMap.keyMap(node.fields, (field) => field.name.value);

      for (const fieldDef of Object.values(type.getFields())) {
        const fieldNode = fieldNodeMap[fieldDef.name];

        if (!fieldNode && definition.isRequiredInputField(fieldDef)) {
          const typeStr = inspect.inspect(fieldDef.type);
          context.reportError(
            new GraphQLError.GraphQLError(
              `Field "${type.name}.${fieldDef.name}" of required type "${typeStr}" was not provided.`,
              {
                nodes: node,
              },
            ),
          );
        }
      }
    },

    ObjectField(node) {
      const parentType = definition.getNamedType(context.getParentInputType());
      const fieldType = context.getInputType();

      if (!fieldType && definition.isInputObjectType(parentType)) {
        const suggestions = suggestionList.suggestionList(
          node.name.value,
          Object.keys(parentType.getFields()),
        );
        context.reportError(
          new GraphQLError.GraphQLError(
            `Field "${node.name.value}" is not defined by type "${parentType.name}".` +
              didYouMean.didYouMean(suggestions),
            {
              nodes: node,
            },
          ),
        );
      }
    },

    NullValue(node) {
      const type = context.getInputType();

      if (definition.isNonNullType(type)) {
        context.reportError(
          new GraphQLError.GraphQLError(
            `Expected value of type "${inspect.inspect(type)}", found ${printer.print(node)}.`,
            {
              nodes: node,
            },
          ),
        );
      }
    },

    EnumValue: (node) => isValidValueNode(context, node),
    IntValue: (node) => isValidValueNode(context, node),
    FloatValue: (node) => isValidValueNode(context, node),
    StringValue: (node) => isValidValueNode(context, node),
    BooleanValue: (node) => isValidValueNode(context, node),
  };
}
/**
 * Any value literal may be a valid representation of a Scalar, depending on
 * that scalar type.
 */

function isValidValueNode(context, node) {
  // Report any error at the full type expected by the location.
  const locationType = context.getInputType();

  if (!locationType) {
    return;
  }

  const type = definition.getNamedType(locationType);

  if (!definition.isLeafType(type)) {
    const typeStr = inspect.inspect(locationType);
    context.reportError(
      new GraphQLError.GraphQLError(
        `Expected value of type "${typeStr}", found ${printer.print(node)}.`,
        {
          nodes: node,
        },
      ),
    );
    return;
  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),
  // which may throw or return an invalid value to indicate failure.

  try {
    const parseResult = type.parseLiteral(
      node,
      undefined,
      /* variables */
    );

    if (parseResult === undefined) {
      const typeStr = inspect.inspect(locationType);
      context.reportError(
        new GraphQLError.GraphQLError(
          `Expected value of type "${typeStr}", found ${printer.print(node)}.`,
          {
            nodes: node,
          },
        ),
      );
    }
  } catch (error) {
    const typeStr = inspect.inspect(locationType);

    if (error instanceof GraphQLError.GraphQLError) {
      context.reportError(error);
    } else {
      context.reportError(
        new GraphQLError.GraphQLError(
          `Expected value of type "${typeStr}", found ${printer.print(node)}; ` +
            error.message,
          {
            nodes: node,
            originalError: error,
          },
        ),
      );
    }
  }
}

exports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;
//# sourceMappingURL=ValuesOfCorrectTypeRule.mjs.js.map
