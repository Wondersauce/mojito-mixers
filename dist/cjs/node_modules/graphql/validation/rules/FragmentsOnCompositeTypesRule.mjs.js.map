{"version":3,"file":"FragmentsOnCompositeTypesRule.mjs.js","sources":["../../../../../../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n"],"names":["typeFromAST","isCompositeType","print","GraphQLError"],"mappings":";;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,6BAA6B,CAAC,OAAO,EAAE;AACvD,EAAE,OAAO;AACT,IAAI,cAAc,CAAC,IAAI,EAAE;AACzB,MAAM,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;AAC/C;AACA,MAAM,IAAI,aAAa,EAAE;AACzB,QAAQ,MAAM,IAAI,GAAGA,uBAAW,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,aAAa,CAAC,CAAC;AACrE;AACA,QAAQ,IAAI,IAAI,IAAI,CAACC,0BAAe,CAAC,IAAI,CAAC,EAAE;AAC5C,UAAU,MAAM,OAAO,GAAGC,aAAK,CAAC,aAAa,CAAC,CAAC;AAC/C,UAAU,OAAO,CAAC,WAAW;AAC7B,YAAY,IAAIC,yBAAY;AAC5B,cAAc,CAAC,iDAAiD,EAAE,OAAO,CAAC,EAAE,CAAC;AAC7E,cAAc;AACd,gBAAgB,KAAK,EAAE,aAAa;AACpC,eAAe;AACf,aAAa;AACb,WAAW,CAAC;AACZ,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,kBAAkB,CAAC,IAAI,EAAE;AAC7B,MAAM,MAAM,IAAI,GAAGH,uBAAW,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AACxE;AACA,MAAM,IAAI,IAAI,IAAI,CAACC,0BAAe,CAAC,IAAI,CAAC,EAAE;AAC1C,QAAQ,MAAM,OAAO,GAAGC,aAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAClD,QAAQ,OAAO,CAAC,WAAW;AAC3B,UAAU,IAAIC,yBAAY;AAC1B,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,0CAA0C,EAAE,OAAO,CAAC,EAAE,CAAC;AAChG,YAAY;AACZ,cAAc,KAAK,EAAE,IAAI,CAAC,aAAa;AACvC,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV,OAAO;AACP,KAAK;AACL,GAAG,CAAC;AACJ;;;;"}