'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var inspect = require('../../jsutils/inspect.mjs.js');
var GraphQLError = require('../../error/GraphQLError.mjs.js');
var definition = require('../../type/definition.mjs.js');

/**
 * Scalar leafs
 *
 * A GraphQL document is valid only if all leaf fields (fields without
 * sub selections) are of scalar or enum types.
 */
function ScalarLeafsRule(context) {
  return {
    Field(node) {
      const type = context.getType();
      const selectionSet = node.selectionSet;

      if (type) {
        if (definition.isLeafType(definition.getNamedType(type))) {
          if (selectionSet) {
            const fieldName = node.name.value;
            const typeStr = inspect.inspect(type);
            context.reportError(
              new GraphQLError.GraphQLError(
                `Field "${fieldName}" must not have a selection since type "${typeStr}" has no subfields.`,
                {
                  nodes: selectionSet,
                },
              ),
            );
          }
        } else if (!selectionSet) {
          const fieldName = node.name.value;
          const typeStr = inspect.inspect(type);
          context.reportError(
            new GraphQLError.GraphQLError(
              `Field "${fieldName}" of type "${typeStr}" must have a selection of subfields. Did you mean "${fieldName} { ... }"?`,
              {
                nodes: node,
              },
            ),
          );
        }
      }
    },
  };
}

exports.ScalarLeafsRule = ScalarLeafsRule;
//# sourceMappingURL=ScalarLeafsRule.mjs.js.map
