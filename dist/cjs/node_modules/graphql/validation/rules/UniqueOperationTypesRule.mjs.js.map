{"version":3,"file":"UniqueOperationTypesRule.mjs.js","sources":["../../../../../../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n"],"names":["GraphQLError"],"mappings":";;;;;;AAEA;AACA;AACA;AACA;AACA;AACO,SAAS,wBAAwB,CAAC,OAAO,EAAE;AAClD,EAAE,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;AACrC,EAAE,MAAM,qBAAqB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpD,EAAE,MAAM,sBAAsB,GAAG,MAAM;AACvC,MAAM;AACN,QAAQ,KAAK,EAAE,MAAM,CAAC,YAAY,EAAE;AACpC,QAAQ,QAAQ,EAAE,MAAM,CAAC,eAAe,EAAE;AAC1C,QAAQ,YAAY,EAAE,MAAM,CAAC,mBAAmB,EAAE;AAClD,OAAO;AACP,MAAM,EAAE,CAAC;AACT,EAAE,OAAO;AACT,IAAI,gBAAgB,EAAE,mBAAmB;AACzC,IAAI,eAAe,EAAE,mBAAmB;AACxC,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,mBAAmB,CAAC,IAAI,EAAE;AACrC,IAAI,IAAI,oBAAoB,CAAC;AAC7B;AACA;AACA;AACA;AACA,IAAI,MAAM,mBAAmB;AAC7B,MAAM,CAAC,oBAAoB,GAAG,IAAI,CAAC,cAAc,MAAM,IAAI;AAC3D,MAAM,oBAAoB,KAAK,KAAK,CAAC;AACrC,UAAU,oBAAoB;AAC9B,UAAU,EAAE,CAAC;AACb;AACA,IAAI,KAAK,MAAM,aAAa,IAAI,mBAAmB,EAAE;AACrD,MAAM,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;AAChD,MAAM,MAAM,2BAA2B,GAAG,qBAAqB,CAAC,SAAS,CAAC,CAAC;AAC3E;AACA,MAAM,IAAI,sBAAsB,CAAC,SAAS,CAAC,EAAE;AAC7C,QAAQ,OAAO,CAAC,WAAW;AAC3B,UAAU,IAAIA,yBAAY;AAC1B,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,uDAAuD,CAAC;AAC1F,YAAY;AACZ,cAAc,KAAK,EAAE,aAAa;AAClC,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV,OAAO,MAAM,IAAI,2BAA2B,EAAE;AAC9C,QAAQ,OAAO,CAAC,WAAW;AAC3B,UAAU,IAAIA,yBAAY;AAC1B,YAAY,CAAC,sBAAsB,EAAE,SAAS,CAAC,gBAAgB,CAAC;AAChE,YAAY;AACZ,cAAc,KAAK,EAAE,CAAC,2BAA2B,EAAE,aAAa,CAAC;AACjE,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV,OAAO,MAAM;AACb,QAAQ,qBAAqB,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC;AACzD,OAAO;AACP,KAAK;AACL;AACA,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG;AACH;;;;"}