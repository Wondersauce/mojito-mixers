{"version":3,"file":"VariablesAreInputTypesRule.mjs.js","sources":["../../../../../../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(\n          new GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n"],"names":["typeFromAST","isInputType","print","GraphQLError"],"mappings":";;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,0BAA0B,CAAC,OAAO,EAAE;AACpD,EAAE,OAAO;AACT,IAAI,kBAAkB,CAAC,IAAI,EAAE;AAC7B,MAAM,MAAM,IAAI,GAAGA,uBAAW,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/D;AACA,MAAM,IAAI,IAAI,KAAK,SAAS,IAAI,CAACC,sBAAW,CAAC,IAAI,CAAC,EAAE;AACpD,QAAQ,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;AACtD,QAAQ,MAAM,QAAQ,GAAGC,aAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1C,QAAQ,OAAO,CAAC,WAAW;AAC3B,UAAU,IAAIC,yBAAY;AAC1B,YAAY,CAAC,WAAW,EAAE,YAAY,CAAC,4BAA4B,EAAE,QAAQ,CAAC,EAAE,CAAC;AACjF,YAAY;AACZ,cAAc,KAAK,EAAE,IAAI,CAAC,IAAI;AAC9B,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV,OAAO;AACP,KAAK;AACL,GAAG,CAAC;AACJ;;;;"}