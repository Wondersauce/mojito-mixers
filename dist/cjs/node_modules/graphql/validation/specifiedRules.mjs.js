'use strict';

var ExecutableDefinitionsRule = require('./rules/ExecutableDefinitionsRule.mjs.js');
var FieldsOnCorrectTypeRule = require('./rules/FieldsOnCorrectTypeRule.mjs.js');
var FragmentsOnCompositeTypesRule = require('./rules/FragmentsOnCompositeTypesRule.mjs.js');
var KnownArgumentNamesRule = require('./rules/KnownArgumentNamesRule.mjs.js');
var KnownDirectivesRule = require('./rules/KnownDirectivesRule.mjs.js');
var KnownFragmentNamesRule = require('./rules/KnownFragmentNamesRule.mjs.js');
var KnownTypeNamesRule = require('./rules/KnownTypeNamesRule.mjs.js');
var LoneAnonymousOperationRule = require('./rules/LoneAnonymousOperationRule.mjs.js');
var LoneSchemaDefinitionRule = require('./rules/LoneSchemaDefinitionRule.mjs.js');
var NoFragmentCyclesRule = require('./rules/NoFragmentCyclesRule.mjs.js');
var NoUndefinedVariablesRule = require('./rules/NoUndefinedVariablesRule.mjs.js');
var NoUnusedFragmentsRule = require('./rules/NoUnusedFragmentsRule.mjs.js');
var NoUnusedVariablesRule = require('./rules/NoUnusedVariablesRule.mjs.js');
var OverlappingFieldsCanBeMergedRule = require('./rules/OverlappingFieldsCanBeMergedRule.mjs.js');
var PossibleFragmentSpreadsRule = require('./rules/PossibleFragmentSpreadsRule.mjs.js');
var PossibleTypeExtensionsRule = require('./rules/PossibleTypeExtensionsRule.mjs.js');
var ProvidedRequiredArgumentsRule = require('./rules/ProvidedRequiredArgumentsRule.mjs.js');
var ScalarLeafsRule = require('./rules/ScalarLeafsRule.mjs.js');
var SingleFieldSubscriptionsRule = require('./rules/SingleFieldSubscriptionsRule.mjs.js');
var UniqueArgumentDefinitionNamesRule = require('./rules/UniqueArgumentDefinitionNamesRule.mjs.js');
var UniqueArgumentNamesRule = require('./rules/UniqueArgumentNamesRule.mjs.js');
var UniqueDirectiveNamesRule = require('./rules/UniqueDirectiveNamesRule.mjs.js');
var UniqueDirectivesPerLocationRule = require('./rules/UniqueDirectivesPerLocationRule.mjs.js');
var UniqueEnumValueNamesRule = require('./rules/UniqueEnumValueNamesRule.mjs.js');
var UniqueFieldDefinitionNamesRule = require('./rules/UniqueFieldDefinitionNamesRule.mjs.js');
var UniqueFragmentNamesRule = require('./rules/UniqueFragmentNamesRule.mjs.js');
var UniqueInputFieldNamesRule = require('./rules/UniqueInputFieldNamesRule.mjs.js');
var UniqueOperationNamesRule = require('./rules/UniqueOperationNamesRule.mjs.js');
var UniqueOperationTypesRule = require('./rules/UniqueOperationTypesRule.mjs.js');
var UniqueTypeNamesRule = require('./rules/UniqueTypeNamesRule.mjs.js');
var UniqueVariableNamesRule = require('./rules/UniqueVariableNamesRule.mjs.js');
var ValuesOfCorrectTypeRule = require('./rules/ValuesOfCorrectTypeRule.mjs.js');
var VariablesAreInputTypesRule = require('./rules/VariablesAreInputTypesRule.mjs.js');
var VariablesInAllowedPositionRule = require('./rules/VariablesInAllowedPositionRule.mjs.js');

// Spec Section: "Executable Definitions"

/**
 * This set includes all validation rules defined by the GraphQL spec.
 *
 * The order of the rules in this list has been adjusted to lead to the
 * most clear output when encountering multiple validation errors.
 */
Object.freeze([
  ExecutableDefinitionsRule.ExecutableDefinitionsRule,
  UniqueOperationNamesRule.UniqueOperationNamesRule,
  LoneAnonymousOperationRule.LoneAnonymousOperationRule,
  SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule,
  KnownTypeNamesRule.KnownTypeNamesRule,
  FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule,
  VariablesAreInputTypesRule.VariablesAreInputTypesRule,
  ScalarLeafsRule.ScalarLeafsRule,
  FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule,
  UniqueFragmentNamesRule.UniqueFragmentNamesRule,
  KnownFragmentNamesRule.KnownFragmentNamesRule,
  NoUnusedFragmentsRule.NoUnusedFragmentsRule,
  PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule,
  NoFragmentCyclesRule.NoFragmentCyclesRule,
  UniqueVariableNamesRule.UniqueVariableNamesRule,
  NoUndefinedVariablesRule.NoUndefinedVariablesRule,
  NoUnusedVariablesRule.NoUnusedVariablesRule,
  KnownDirectivesRule.KnownDirectivesRule,
  UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,
  KnownArgumentNamesRule.KnownArgumentNamesRule,
  UniqueArgumentNamesRule.UniqueArgumentNamesRule,
  ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule,
  ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule,
  VariablesInAllowedPositionRule.VariablesInAllowedPositionRule,
  OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule,
  UniqueInputFieldNamesRule.UniqueInputFieldNamesRule,
]);
/**
 * @internal
 */

Object.freeze([
  LoneSchemaDefinitionRule.LoneSchemaDefinitionRule,
  UniqueOperationTypesRule.UniqueOperationTypesRule,
  UniqueTypeNamesRule.UniqueTypeNamesRule,
  UniqueEnumValueNamesRule.UniqueEnumValueNamesRule,
  UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule,
  UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule,
  UniqueDirectiveNamesRule.UniqueDirectiveNamesRule,
  KnownTypeNamesRule.KnownTypeNamesRule,
  KnownDirectivesRule.KnownDirectivesRule,
  UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,
  PossibleTypeExtensionsRule.PossibleTypeExtensionsRule,
  KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule,
  UniqueArgumentNamesRule.UniqueArgumentNamesRule,
  UniqueInputFieldNamesRule.UniqueInputFieldNamesRule,
  ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule,
]);
//# sourceMappingURL=specifiedRules.mjs.js.map
