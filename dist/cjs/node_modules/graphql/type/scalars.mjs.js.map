{"version":3,"file":"scalars.mjs.js","sources":["../../../../../node_modules/graphql/type/scalars.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLScalarType } from './definition.mjs';\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\nexport const GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexport const GRAPHQL_MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n"],"names":["GraphQLScalarType","GraphQLError","inspect","Kind","print","isObjectLike"],"mappings":"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"}