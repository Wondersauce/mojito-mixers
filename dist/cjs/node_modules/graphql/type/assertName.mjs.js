'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var devAssert = require('../jsutils/devAssert.mjs.js');
var GraphQLError = require('../error/GraphQLError.mjs.js');
var characterClasses = require('../language/characterClasses.mjs.js');

/**
 * Upholds the spec rules about naming.
 */

function assertName(name) {
  name != null || devAssert.devAssert(false, 'Must provide name.');
  typeof name === 'string' || devAssert.devAssert(false, 'Expected name to be a string.');

  if (name.length === 0) {
    throw new GraphQLError.GraphQLError('Expected name to be a non-empty string.');
  }

  for (let i = 1; i < name.length; ++i) {
    if (!characterClasses.isNameContinue(name.charCodeAt(i))) {
      throw new GraphQLError.GraphQLError(
        `Names must only contain [_a-zA-Z0-9] but "${name}" does not.`,
      );
    }
  }

  if (!characterClasses.isNameStart(name.charCodeAt(0))) {
    throw new GraphQLError.GraphQLError(
      `Names must start with [_a-zA-Z] but "${name}" does not.`,
    );
  }

  return name;
}
/**
 * Upholds the spec rules about naming enum values.
 *
 * @internal
 */

function assertEnumValueName(name) {
  if (name === 'true' || name === 'false' || name === 'null') {
    throw new GraphQLError.GraphQLError(`Enum values cannot be named: ${name}`);
  }

  return assertName(name);
}

exports.assertEnumValueName = assertEnumValueName;
exports.assertName = assertName;
//# sourceMappingURL=assertName.mjs.js.map
