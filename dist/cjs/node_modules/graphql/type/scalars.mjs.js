'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var inspect = require('../jsutils/inspect.mjs.js');
var isObjectLike = require('../jsutils/isObjectLike.mjs.js');
var GraphQLError = require('../error/GraphQLError.mjs.js');
var kinds = require('../language/kinds.mjs.js');
var printer = require('../language/printer.mjs.js');
var definition = require('./definition.mjs.js');

/**
 * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).
 * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1
 * */

const GRAPHQL_MAX_INT = 2147483647;
/**
 * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).
 * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)
 * */

const GRAPHQL_MIN_INT = -2147483648;
const GraphQLInt = new definition.GraphQLScalarType({
  name: 'Int',
  description:
    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',

  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue);

    if (typeof coercedValue === 'boolean') {
      return coercedValue ? 1 : 0;
    }

    let num = coercedValue;

    if (typeof coercedValue === 'string' && coercedValue !== '') {
      num = Number(coercedValue);
    }

    if (typeof num !== 'number' || !Number.isInteger(num)) {
      throw new GraphQLError.GraphQLError(
        `Int cannot represent non-integer value: ${inspect.inspect(coercedValue)}`,
      );
    }

    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
      throw new GraphQLError.GraphQLError(
        'Int cannot represent non 32-bit signed integer value: ' +
          inspect.inspect(coercedValue),
      );
    }

    return num;
  },

  parseValue(inputValue) {
    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {
      throw new GraphQLError.GraphQLError(
        `Int cannot represent non-integer value: ${inspect.inspect(inputValue)}`,
      );
    }

    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {
      throw new GraphQLError.GraphQLError(
        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,
      );
    }

    return inputValue;
  },

  parseLiteral(valueNode) {
    if (valueNode.kind !== kinds.Kind.INT) {
      throw new GraphQLError.GraphQLError(
        `Int cannot represent non-integer value: ${printer.print(valueNode)}`,
        {
          nodes: valueNode,
        },
      );
    }

    const num = parseInt(valueNode.value, 10);

    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
      throw new GraphQLError.GraphQLError(
        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,
        {
          nodes: valueNode,
        },
      );
    }

    return num;
  },
});
const GraphQLFloat = new definition.GraphQLScalarType({
  name: 'Float',
  description:
    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',

  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue);

    if (typeof coercedValue === 'boolean') {
      return coercedValue ? 1 : 0;
    }

    let num = coercedValue;

    if (typeof coercedValue === 'string' && coercedValue !== '') {
      num = Number(coercedValue);
    }

    if (typeof num !== 'number' || !Number.isFinite(num)) {
      throw new GraphQLError.GraphQLError(
        `Float cannot represent non numeric value: ${inspect.inspect(coercedValue)}`,
      );
    }

    return num;
  },

  parseValue(inputValue) {
    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {
      throw new GraphQLError.GraphQLError(
        `Float cannot represent non numeric value: ${inspect.inspect(inputValue)}`,
      );
    }

    return inputValue;
  },

  parseLiteral(valueNode) {
    if (valueNode.kind !== kinds.Kind.FLOAT && valueNode.kind !== kinds.Kind.INT) {
      throw new GraphQLError.GraphQLError(
        `Float cannot represent non numeric value: ${printer.print(valueNode)}`,
        valueNode,
      );
    }

    return parseFloat(valueNode.value);
  },
});
const GraphQLString = new definition.GraphQLScalarType({
  name: 'String',
  description:
    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',

  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not
    // attempt to coerce object, function, symbol, or other types as strings.

    if (typeof coercedValue === 'string') {
      return coercedValue;
    }

    if (typeof coercedValue === 'boolean') {
      return coercedValue ? 'true' : 'false';
    }

    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {
      return coercedValue.toString();
    }

    throw new GraphQLError.GraphQLError(
      `String cannot represent value: ${inspect.inspect(outputValue)}`,
    );
  },

  parseValue(inputValue) {
    if (typeof inputValue !== 'string') {
      throw new GraphQLError.GraphQLError(
        `String cannot represent a non string value: ${inspect.inspect(inputValue)}`,
      );
    }

    return inputValue;
  },

  parseLiteral(valueNode) {
    if (valueNode.kind !== kinds.Kind.STRING) {
      throw new GraphQLError.GraphQLError(
        `String cannot represent a non string value: ${printer.print(valueNode)}`,
        {
          nodes: valueNode,
        },
      );
    }

    return valueNode.value;
  },
});
const GraphQLBoolean = new definition.GraphQLScalarType({
  name: 'Boolean',
  description: 'The `Boolean` scalar type represents `true` or `false`.',

  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue);

    if (typeof coercedValue === 'boolean') {
      return coercedValue;
    }

    if (Number.isFinite(coercedValue)) {
      return coercedValue !== 0;
    }

    throw new GraphQLError.GraphQLError(
      `Boolean cannot represent a non boolean value: ${inspect.inspect(coercedValue)}`,
    );
  },

  parseValue(inputValue) {
    if (typeof inputValue !== 'boolean') {
      throw new GraphQLError.GraphQLError(
        `Boolean cannot represent a non boolean value: ${inspect.inspect(inputValue)}`,
      );
    }

    return inputValue;
  },

  parseLiteral(valueNode) {
    if (valueNode.kind !== kinds.Kind.BOOLEAN) {
      throw new GraphQLError.GraphQLError(
        `Boolean cannot represent a non boolean value: ${printer.print(valueNode)}`,
        {
          nodes: valueNode,
        },
      );
    }

    return valueNode.value;
  },
});
const GraphQLID = new definition.GraphQLScalarType({
  name: 'ID',
  description:
    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',

  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue);

    if (typeof coercedValue === 'string') {
      return coercedValue;
    }

    if (Number.isInteger(coercedValue)) {
      return String(coercedValue);
    }

    throw new GraphQLError.GraphQLError(
      `ID cannot represent value: ${inspect.inspect(outputValue)}`,
    );
  },

  parseValue(inputValue) {
    if (typeof inputValue === 'string') {
      return inputValue;
    }

    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {
      return inputValue.toString();
    }

    throw new GraphQLError.GraphQLError(`ID cannot represent value: ${inspect.inspect(inputValue)}`);
  },

  parseLiteral(valueNode) {
    if (valueNode.kind !== kinds.Kind.STRING && valueNode.kind !== kinds.Kind.INT) {
      throw new GraphQLError.GraphQLError(
        'ID cannot represent a non-string and non-integer value: ' +
          printer.print(valueNode),
        {
          nodes: valueNode,
        },
      );
    }

    return valueNode.value;
  },
});
const specifiedScalarTypes = Object.freeze([
  GraphQLString,
  GraphQLInt,
  GraphQLFloat,
  GraphQLBoolean,
  GraphQLID,
]);
// a common way to represent a complex value which can be represented as
// a string (ex: MongoDB id objects).

function serializeObject(outputValue) {
  if (isObjectLike.isObjectLike(outputValue)) {
    if (typeof outputValue.valueOf === 'function') {
      const valueOfResult = outputValue.valueOf();

      if (!isObjectLike.isObjectLike(valueOfResult)) {
        return valueOfResult;
      }
    }

    if (typeof outputValue.toJSON === 'function') {
      return outputValue.toJSON();
    }
  }

  return outputValue;
}

exports.GRAPHQL_MAX_INT = GRAPHQL_MAX_INT;
exports.GRAPHQL_MIN_INT = GRAPHQL_MIN_INT;
exports.GraphQLBoolean = GraphQLBoolean;
exports.GraphQLFloat = GraphQLFloat;
exports.GraphQLID = GraphQLID;
exports.GraphQLInt = GraphQLInt;
exports.GraphQLString = GraphQLString;
exports.specifiedScalarTypes = specifiedScalarTypes;
//# sourceMappingURL=scalars.mjs.js.map
